!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("three")):"function"==typeof define&&define.amd?define("prettyGraphCore",["three"],e):"object"==typeof exports?exports.prettyGraphCore=e(require("three")):t.prettyGraphCore=e(t.three)}("undefined"!=typeof self?self:this,function(t){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=1)}([function(e,i){e.exports=t},function(t,e,i){"use strict";i.r(e);var n=i(0);class s{constructor(){this.events={}}on(t,e){return"object"!=typeof this.events[t]&&(this.events[t]=[]),this.events[t].push(e),()=>this.removeListener(t,e)}removeListener(t,e){if("object"!=typeof this.events[t])return;const i=this.events[t].indexOf(e);i>-1&&this.events[t].splice(i,1)}removeAllListeners(){Object.keys(this.events).forEach(t=>this.events[t].splice(0,this.events[t].length))}emit(t,...e){"object"==typeof this.events[t]&&[...this.events[t]].forEach(t=>t.apply(this,e))}once(t,e){const i=this.on(t,(...t)=>{i(),e.apply(this,t)});return i}}class r extends n.EventDispatcher{constructor(){super(),this.textureWidth=0,this.textureHeight=0,this.canvasHeight=4096,this.canvasWidth=4096,this._nodeImageToIndex={},this._textureIndex=0,this.canvas=document.createElement("canvas"),this.canvas.width=this.canvasWidth,this.canvas.height=this.canvasHeight,this.textureWidth=this.canvasWidth/32,this.textureHeight=this.canvasHeight/32,this._ctx=this.canvas.getContext("2d"),this._ctx&&(this._ctx.fillStyle="white",this._ctx.clearRect(0,0,this.canvas.width,this.canvas.height)),this.textureMap=new n.CanvasTexture(this.canvas),this.textureMap.flipY=!1}dispose(){this.textureMap.dispose()}loadImage(t){if(void 0!==this._nodeImageToIndex[t])return this._nodeImageToIndex[t];if(this._ctx){const e=this._textureIndex;this._textureIndex+=1,this._nodeImageToIndex[t]=e;const i=new Image;return i.onload=(()=>{const t=e*this.textureWidth%this.canvasWidth,n=Math.floor(e*this.textureWidth/this.canvasWidth)*this.textureHeight;this._ctx&&this._ctx.drawImage(i,0,0,i.width,i.height,t,n,this.textureWidth,this.textureHeight),this.textureMap.needsUpdate=!0,this.dispatchEvent({index:e,type:"imageLoaded"})}),i.src=t,e}return-1}}const o="\n  precision mediump float;\n\n  uniform mat4 modelViewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float scale;\n  uniform vec2 spriteDim;\n  uniform vec2 textureDim;\n\n  attribute vec3 position;    // blueprint's vertex positions\n  attribute vec3 color;       // only used for raycasting\n  attribute vec3 translation; // x y translation offsets for an instance\n  attribute float size;\n  attribute float image;\n\n  varying vec3 vColor;\n  varying float vScale;\n  varying float vSize;\n  varying highp vec4 v_sprite;\n\n  void main() {\n    vColor = color;\n    vScale = scale;\n    vSize = size;\n\n    highp vec2 sp = vec2(mod((image * spriteDim.x), textureDim.x), floor((image * spriteDim.x) / textureDim.y) * spriteDim.y);\n    v_sprite = vec4(sp.x / textureDim.x, sp.y / textureDim.y, spriteDim.x / textureDim.x, spriteDim.y / textureDim.y);\n\n    vec3 pos = position + translation;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n\n    if (size * scale * 7.0 > 12.0) {\n      gl_PointSize = size * scale * 7.0;\n    } else {\n      gl_PointSize = 12.0;\n    }\n  }\n",a="\n  precision mediump float;\n\n  uniform mat4 modelViewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform vec2 spriteDim;\n  uniform vec2 textureDim;\n  uniform float scale;\n\n  attribute vec3 position;    // blueprint's vertex positions\n  attribute vec3 translation; // x y translation offsets for an instance\n  attribute float image;\n  attribute float size;\n  attribute vec2 uv;\n\n  varying highp vec4 v_sprite;\n  varying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n\n    highp vec2 sp = vec2(mod((image * spriteDim.x), textureDim.x), floor((image * spriteDim.x) / textureDim.y) * spriteDim.y);\n    v_sprite = vec4(sp.x / textureDim.x, sp.y / textureDim.y, spriteDim.x / textureDim.x, spriteDim.y / textureDim.y);\n\n    vec3 pos = position + translation;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos.x + 7.0 * (size / 2.0), pos.y, pos.z, 1.0);\n  }\n",h="\n  #ifdef GL_OES_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n  #endif\n\n  precision highp float;\n\n  uniform sampler2D textureMap;\n\n  varying float vScale;\n  varying float vSize;\n  varying vec3 vColor;\n  varying highp vec4 v_sprite;\n\n  void main() {\n    vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n    float distance = 0.2;\n    float border = 0.2;\n    float radius = 0.5;\n\n    if (vSize * 7.0 * vScale > 40.0) {\n      distance = 0.02;\n      if (vScale < 2.0) {\n        border = distance + 0.04;\n      } else if (vScale < 4.0) {\n        border = distance + 0.03;\n      } else {\n        border = distance + 0.02;\n      }\n      vec2 m = uv - vec2(0.5, 0.5);\n      float dist = radius - sqrt(dot(m, m));\n\n      float sm = smoothstep(0.0, distance, dist);\n      float sm2 = smoothstep(border, border - distance, dist);\n      float alpha = sm*sm2;\n\n      float tm = smoothstep(border, border + distance, dist);\n\n      if (dist > border)\n        gl_FragColor = vec4(texture2D(textureMap, vec2((v_sprite.s + v_sprite.p * uv.x), (v_sprite.t + v_sprite.q * uv.y))).rgb, tm);\n      else if (dist > 0.0)\n        gl_FragColor = vec4(vColor, alpha);\n      else discard;\n    } else {\n      distance = 0.25;\n      if (vScale > 1.2) {\n        border = 0.5 - (vScale / 7.0) * 1.9;\n      } else {\n        border = 0.25;\n      }\n\n      vec2 m = uv - vec2(0.5, 0.5);\n      float dist = radius - sqrt(dot(m, m));\n\n      float sm = smoothstep(0.0, distance, dist);\n      float sm2 = smoothstep(border, border - distance, dist);\n      float alpha = sm*sm2;\n\n      float tm = smoothstep(border, border + distance, dist);\n\n      if (dist > border || dist > 0.0)\n        gl_FragColor = vec4(0.0, 0.0, 0.0, alpha);\n      else discard;\n    }\n  }\n",d="\n  precision highp float;\n\n  uniform sampler2D textureMap;\n\n  varying highp vec4 v_sprite;\n  varying vec2 vUv;\n\n  void main() {\n    vec2 uv = vec2( vUv.x, 1.0 - vUv.y );\n    gl_FragColor = texture2D(textureMap, vec2((v_sprite.s + v_sprite.p * uv.x), (v_sprite.t + v_sprite.q * uv.y)));\n  }\n",c="\n  precision mediump float;\n\n  uniform mat4 modelViewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float scale;\n\n  attribute vec3 position;    // blueprint's vertex positions\n  attribute vec3 color;       // only used for raycasting\n  attribute vec3 translation; // x y translation offsets for an instance\n  attribute float size;\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = color;\n\n    vec3 pos = position + translation;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n\n    gl_PointSize = size * scale * 7.0;\n  }\n",l="\n  #ifdef GL_OES_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n  #endif\n\n  precision highp float;\n\n  varying vec3 vColor;\n\n  void main() {\n    float r = 0.0, delta = 0.0, alpha = 1.0;\n    vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n    r = dot(cxy, cxy);\n    if (r > 1.0) {\n      discard;\n    }\n\n    gl_FragColor = vec4(vColor, 1.0) * alpha;\n  }\n";class u extends n.EventDispatcher{constructor(){super(),this.textureWidth=0,this.textureHeight=0,this.canvasHeight=4096,this.canvasWidth=4096,this._textOptionsToIndex={},this._textureIndex=0,this.canvas=document.createElement("canvas"),this.canvas.width=this.canvasWidth,this.canvas.height=this.canvasHeight,this.textureWidth=this.canvasWidth/8,this.textureHeight=30,this._ctx=this.canvas.getContext("2d"),this._ctx&&(this._ctx.fillStyle="white",this._ctx.clearRect(0,0,this.canvas.width,this.canvas.height)),this.textureMap=new n.CanvasTexture(this.canvas),this.textureMap.flipY=!1}dispose(){this.textureMap.dispose()}drawText(t,e){const i=t;if(void 0!==this._textOptionsToIndex[i])return this._textOptionsToIndex[i];if(this._ctx){const n=this._textureIndex;this._textureIndex+=1,this._textOptionsToIndex[i]=n;const s=18/this.textureWidth,r=Math.round(s*this.textureWidth),o=n*this.textureWidth%this.canvasWidth,a=Math.floor(n*this.textureWidth/this.canvasWidth)*this.textureHeight;return this._ctx.beginPath(),this._ctx.fillStyle="white",this._ctx.clearRect(o,a,this.textureWidth,this.textureHeight),this._ctx.beginPath(),this._ctx.fillStyle=e.color,this._ctx.font=r+"px "+e.font,this._ctx.textAlign="start",this._ctx.textBaseline="middle",this._ctx.fillText(t,o+5,a+.5*this.textureHeight),this.textureMap.needsUpdate=!0,n}return-1}}function _(t){n.ShaderMaterial.call(this,{type:"LineMaterial",uniforms:n.UniformsUtils.clone(n.ShaderLib.line.uniforms),vertexShader:n.ShaderLib.line.vertexShader,fragmentShader:n.ShaderLib.line.fragmentShader}),this.dashed=!1,Object.defineProperties(this,{color:{enumerable:!0,get:function(){return this.uniforms.diffuse.value},set:function(t){this.uniforms.diffuse.value=t}},useColor:{enumerable:!0,get:function(){return this.uniforms.useColor.value},set:function(t){this.uniforms.useColor.value=t}},dashScale:{enumerable:!0,get:function(){return this.uniforms.dashScale.value},set:function(t){this.uniforms.dashScale.value=t}},dashSize:{enumerable:!0,get:function(){return this.uniforms.dashSize.value},set:function(t){this.uniforms.dashSize.value=t}},gapSize:{enumerable:!0,get:function(){return this.uniforms.gapSize.value},set:function(t){this.uniforms.gapSize.value=t}},scale:{enumerable:!0,get:function(){return this.uniforms.scale.value},set:function(t){this.uniforms.scale.value=t}},resolution:{enumerable:!0,get:function(){return this.uniforms.resolution.value},set:function(t){this.uniforms.resolution.value.copy(t)}}}),this.setValues(t)}function p(){n.InstancedBufferGeometry.call(this),this.type="LineSegmentsGeometry";this.setIndex([0,2,1,2,3,1,2,4,3,4,5,3,4,6,5,6,7,5]),this.addAttribute("position",new n.Float32BufferAttribute([-1,2,0,1,2,0,-1,1,0,1,1,0,-1,0,0,1,0,0,-1,-1,0,1,-1,0],3)),this.addAttribute("uv",new n.Float32BufferAttribute([-1,2,1,2,-1,1,1,1,-1,-1,1,-1,-1,-2,1,-2],2))}var v,g,m,f;function y(t,e){n.Mesh.call(this),this.type="LineSegments2",this.geometry=void 0!==t?t:new p,this.material=void 0!==e?e:new _({color:16777215*Math.random()})}function x(t,e){y.call(this),this.type="Line2",this.geometry=void 0!==t?t:new n.LineGeometry,this.material=void 0!==e?e:new n.LineMaterial({color:16777215*Math.random()})}n.UniformsLib.line={resolution:{value:new n.Vector2(1,1)},dashScale:{value:1},useColor:{value:0},dashSize:{value:1},scale:{value:1},gapSize:{value:1}},n.ShaderLib.line={uniforms:n.UniformsUtils.merge([n.UniformsLib.common,n.UniformsLib.fog,n.UniformsLib.line]),vertexShader:"\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n    uniform vec2 resolution;\n    uniform float scale;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\t\tattribute float linewidth;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\tvarying vec2 vUv;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\tvUv = uv;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec2 ndcStart = clipStart.xy / clipStart.w;\n\t\t\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd - ndcStart;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t// perpendicular to dir\n\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\n\t\t\t// undo aspect ratio adjustment\n\t\t\tdir.x /= aspect;\n\t\t\toffset.x /= aspect;\n\n\t\t\t// sign flip\n\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t// endcaps\n\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\toffset += - dir;\n\n\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\toffset += dir;\n\n\t\t\t}\n\n\t\t\t// adjust for linewidth\n\t\t\toffset *= linewidth * scale;\n\n\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\toffset /= resolution.y;\n\n\t\t\t// select end\n\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t// back to clip space\n\t\t\toffset *= clip.w;\n\n\t\t\tclip.xy += offset;\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t",fragmentShader:"\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\t\tuniform float useColor;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\tfloat a = vUv.x;\n\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t}\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tif (useColor == 1.0) {\n\t\t\t\tgl_FragColor = vec4( vColor, 1.0 );\n\t\t\t} else {\n\t\t\t\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\n\t\t\t}\n\n\t\t\t#include <premultiplied_alpha_fragment>\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\n\t\t}\n\t\t"},_.prototype=Object.create(n.ShaderMaterial.prototype),_.prototype.constructor=_,_.prototype.isLineMaterial=!0,_.prototype.copy=function(t){return n.ShaderMaterial.prototype.copy.call(this,t),this.color.copy(t.color),this.resolution=t.resolution,this},p.prototype=Object.assign(Object.create(n.InstancedBufferGeometry.prototype),{constructor:p,isLineSegmentsGeometry:!0,applyMatrix:function(t){var e=this.attributes.instanceStart,i=this.attributes.instanceEnd;return void 0!==e&&(t.applyToBufferAttribute(e),t.applyToBufferAttribute(i),e.data.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},setPositions:function(t){var e;t instanceof Float32Array?e=t:Array.isArray(t)&&(e=new Float32Array(t));var i=new n.InstancedInterleavedBuffer(e,6,1);return this.addAttribute("instanceStart",new n.InterleavedBufferAttribute(i,3,0)),this.addAttribute("instanceEnd",new n.InterleavedBufferAttribute(i,3,3)),this.computeBoundingBox(),this.computeBoundingSphere(),this},setColors:function(t){var e;t instanceof Float32Array?e=t:Array.isArray(t)&&(e=new Float32Array(t));var i=new n.InstancedInterleavedBuffer(e,6,1);return this.addAttribute("instanceColorStart",new n.InterleavedBufferAttribute(i,3,0)),this.addAttribute("instanceColorEnd",new n.InterleavedBufferAttribute(i,3,3)),this},fromWireframeGeometry:function(t){return this.setPositions(t.attributes.position.array),this},fromEdgesGeometry:function(t){return this.setPositions(t.attributes.position.array),this},fromMesh:function(t){return this.fromWireframeGeometry(new n.WireframeGeometry(t.geometry)),this},fromLineSegements:function(t){var e=t.geometry;return e.isGeometry?this.setPositions(e.vertices):e.isBufferGeometry&&this.setPositions(e.position.array),this},computeBoundingBox:(g=new n.Box3,function(){null===this.boundingBox&&(this.boundingBox=new n.Box3);var t=this.attributes.instanceStart,e=this.attributes.instanceEnd;void 0!==t&&void 0!==e&&(this.boundingBox.setFromBufferAttribute(t),g.setFromBufferAttribute(e),this.boundingBox.union(g))}),computeBoundingSphere:(v=new n.Vector3,function(){null===this.boundingSphere&&(this.boundingSphere=new n.Sphere),null===this.boundingBox&&this.computeBoundingBox();var t=this.attributes.instanceStart,e=this.attributes.instanceEnd;if(void 0!==t&&void 0!==e){var i=this.boundingSphere.center;this.boundingBox.getCenter(i);for(var s=0,r=0,o=t.count;r<o;r++)v.fromBufferAttribute(t,r),s=Math.max(s,i.distanceToSquared(v)),v.fromBufferAttribute(e,r),s=Math.max(s,i.distanceToSquared(v));this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error("LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.",this)}}),toJSON:function(){},clone:function(){},copy:function(t){return this}}),y.prototype=Object.assign(Object.create(n.Mesh.prototype),{constructor:y,isLineSegments2:!0,computeLineDistances:(m=new n.Vector3,f=new n.Vector3,function(){for(var t=this.geometry,e=t.attributes.instanceStart,i=t.attributes.instanceEnd,s=new Float32Array(2*e.data.count),r=0,o=0,a=e.data.count;r<a;r++,o+=2)m.fromBufferAttribute(e,r),f.fromBufferAttribute(i,r),s[o]=0===o?0:s[o-1],s[o+1]=s[o]+m.distanceTo(f);var h=new n.InstancedInterleavedBuffer(s,2,1);return t.addAttribute("instanceDistanceStart",new n.InterleavedBufferAttribute(h,1,0)),t.addAttribute("instanceDistanceEnd",new n.InterleavedBufferAttribute(h,1,1)),this}),copy:function(t){return this}}),x.prototype=Object.assign(Object.create(y.prototype),{constructor:x,isLine2:!0,copy:function(t){return this}});class b{constructor(t){this.onEvent=new s,this._options={},this._container=document.body,this._fov=75,this._far=1e4,this._nodes=[],this._edges=[],this._animationFrameRequestId=null,this._center=null,this._hoveredNode=null,this._hoveredNodeID=null,this._hoveredEdge=null,this._hoveredEdgeID=null,this._dragInProgress=!1,this._dragging=!1,this._plane=new n.Plane,this._raycaster=new n.Raycaster,this._intersection=new n.Vector3,this._offset=new n.Vector3,this.options=t,this.options.container&&(this._container=this.options.container,t.clearContainer&&(this._container.innerHTML="")),this._setupScene(),this._setupCamera(),this._setupRenderer(),this._controls=new t.controls(this._camera,this._container),this._controls.init(),this._controls.addEventListener("scale",this._onScale.bind(this)),this._controls.addEventListener("mousemove",this._onMouseMove.bind(this)),this._controls.addEventListener("contextmenu",this._onContextMenu.bind(this)),this._controls.addEventListener("dblclick",this._onDblClick.bind(this)),this._controls.addEventListener("click",this._onClick.bind(this)),this._controls.addEventListener("mousedown",this._onMouseDown.bind(this)),this._controls.addEventListener("mouseup",this._onMouseUp.bind(this)),this._imageLoaded=(()=>{this._render()}),this._imageCanvas=new r,this._textCanvas=new u,this._render(),window.addEventListener("resize",()=>{const t=this._container.getBoundingClientRect();this._renderer.setSize(t.width,t.height),this._camera.aspect=t.width/t.height,this._camera.updateProjectionMatrix(),this._pickingTexture=new n.WebGLRenderTarget(t.width,t.height),this._render()})}set options(t){this._options=t}get options(){return this._options}setData(t){this._nodes=t.nodes,this._edges=t.links,t.center&&(this._center=t.nodes.find(e=>+e.id==+t.center),this._center&&this._controls.setTransform(this._center)),this._disposeMesh(),this._disposeMaterials(),this._disposeGeometries(),this._disposeTextures(),this._renderer.clear(),this._renderer.renderLists.dispose(),this._setupScene(),this._setupPickingScene();const e=this._container.getBoundingClientRect();this._pickingTexture=new n.WebGLRenderTarget(e.width,e.height),this._pickingTexture.texture.minFilter=n.LinearFilter,this._imageCanvas.addEventListener("imageLoaded",this._imageLoaded),this._drawEdges(),this._drawArrows(),this._drawLabels(),this._drawNodes()}stopRenderLoop(){this._animationFrameRequestId&&cancelAnimationFrame(this._animationFrameRequestId),this._animationFrameRequestId=null}resumeRenderLoop(){this._animationFrameRequestId||this._render()}destroy(){this._disposeMesh(),this._disposeTextures(),this._disposeMaterials(),this._disposeGeometries(),this.stopRenderLoop(),this._disposeRenderer(),this._container.innerHTML=""}_onMouseMove({position:t}){if(this._dragging){const e=this._container.getBoundingClientRect(),i=new n.Vector3;i.x=t.x/e.width*2-1,i.y=-t.y/e.height*2+1;let s={x:this._hoveredNode.x,y:this._hoveredNode.y};if(this._dragInProgress)this._raycaster.setFromCamera(i,this._camera),this._raycaster.ray.intersectPlane(this._plane,this._intersection),s=this._intersection.sub(this._offset).clone();else{const t=new n.Vector3;this._camera.getWorldDirection(t),this._plane.setFromNormalAndCoplanarPoint(t,new n.Vector3(this._hoveredNode.x,this._hoveredNode.y,0)),this._raycaster.setFromCamera(i,this._camera),this._raycaster.ray.intersectPlane(this._plane,this._intersection),this._offset.copy(this._intersection).sub(new n.Vector3(this._hoveredNode.x,this._hoveredNode.y,0)),s=this._intersection.sub(this._offset).clone(),this._dragInProgress=!0}null!==this._hoveredNodeID&&(this._nodesGeometry.attributes.translation.setXYZ(this._hoveredNodeID,s.x,s.y,0),this._nodesPickingGeometry.attributes.translation.setXYZ(this._hoveredNodeID,s.x,s.y,0),this._labelsGeometry.attributes.translation.setXYZ(this._hoveredNodeID,s.x+this._textCanvas.textureWidth/2,s.y,0)),this._hoveredNode.x=s.x,this._hoveredNode.y=s.y;const r=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeMoving",{node:this._hoveredNode,...r,scale:this._controls.scale}),this._nodesGeometry.attributes.translation.needsUpdate=!0,this._nodesPickingGeometry.attributes.translation.needsUpdate=!0,this._labelsGeometry.attributes.translation.needsUpdate=!0;const o=this._constructLines(this._edges);this._lineGeometry.setPositions(o.positions),this._linesPickingGeometry.setPositions(o.positions),this._lineGeometry.attributes.instanceStart.data.needsUpdate=!0,this._lineGeometry.attributes.instanceEnd.data.needsUpdate=!0,this._linesPickingGeometry.attributes.instanceStart.data.needsUpdate=!0,this._linesPickingGeometry.attributes.instanceEnd.data.needsUpdate=!0;const{vertices:a,normals:h}=this._calculateArrowData();this._arrowGeometry.attributes.position.array=a,this._arrowGeometry.attributes.normal.array=h,this._arrowGeometry.attributes.position.needsUpdate=!0,this._arrowGeometry.attributes.normal.needsUpdate=!0,this._render()}else this._testNode(t)||this._testEdge(t)}_onMouseUp(){this._controls.enabled=!0,this._dragging=!1,this._dragInProgress=!1}_onMouseDown({event:t}){if(null!==this._hoveredNode){const e=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeClick",{node:this._hoveredNode,...e,scale:this._controls.scale}),1===t.buttons&&(this._controls.enabled=!1,this._dragging=!0)}}_onClick(){this._hoveredNode||this._hoveredEdge||this.onEvent.emit("workspaceClick")}_onDblClick(){if(null!==this._hoveredNode){const t=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeDblClick",{node:this._hoveredNode,...t,scale:this._controls.scale})}}_onContextMenu(){if(null!==this._hoveredNode){const t=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeContextMenu",{node:this._hoveredNode,...t,scale:this._controls.scale})}}_onScale(t){if(this._nodesMaterial){this._nodesMaterial.uniforms.scale.value=t.scale,this._nodesMaterial.needsUpdate=!0,this._nodesPickingMaterial.uniforms.scale.value=t.scale,this._nodesPickingMaterial.needsUpdate=!0,this._labelsMaterial.uniforms.scale.value=t.scale,this._labelsMaterial.needsUpdate=!0,this._lineMaterial.uniforms.scale.value=t.scale,this._lineMaterial.needsUpdate=!0;const{vertices:e,normals:i}=this._calculateArrowData();if(this._arrowGeometry.attributes.position.array=e,this._arrowGeometry.attributes.normal.array=i,this._arrowGeometry.attributes.position.needsUpdate=!0,this._arrowGeometry.attributes.normal.needsUpdate=!0,this._hoveredNode){const t=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeScaling",{node:this._hoveredNode,...t,scale:this._controls.scale})}this._render()}}_disposeMesh(){this._lineMesh&&this._scene.remove(this._lineMesh),this._arrowMesh&&this._scene.remove(this._arrowMesh),this._nodeMesh&&this._scene.remove(this._nodeMesh),this._nodesPickingsMesh&&this._pickingNodesScene.remove(this._nodesPickingsMesh)}_disposeGeometries(){this._nodesGeometry&&this._nodesGeometry.dispose(),this._nodesPickingGeometry&&this._nodesPickingGeometry.dispose(),this._lineGeometry&&this._lineGeometry.dispose(),this._arrowGeometry&&this._arrowGeometry.dispose()}_disposeRenderer(){this._renderer&&this._renderer.dispose()}_disposeMaterials(){this._nodesMaterial&&this._nodesMaterial.dispose(),this._nodesPickingMaterial&&this._nodesPickingMaterial.dispose(),this._lineMaterial&&this._lineMaterial.dispose(),this._arrowMaterial&&this._arrowMaterial.dispose()}_disposeTextures(){this._imageCanvas.removeEventListener("imageLoaded",this._imageLoaded),this._imageCanvas&&this._imageCanvas.dispose(),this._textCanvas&&this._textCanvas.dispose(),this._pickingTexture&&this._pickingTexture.dispose()}_testNode(t){if(this._pickingTexture){this._renderer.render(this._pickingNodesScene,this._camera,this._pickingTexture);const e=new Uint8Array(4);this._renderer.readRenderTargetPixels(this._pickingTexture,t.x,this._pickingTexture.height-t.y,1,1,e);const i=e[0]<<16|e[1]<<8|e[2];if(i){if(this._hoveredNodeID!==i-1){null!==this._hoveredNode&&this._setNodeColor(this._hoveredNode.color),null!==this._hoveredEdge&&(this._setEdgeColor(this._hoveredEdge.color),this._setEdgeSize(this._hoveredEdge.size)),this._hoveredNode=this._nodes[i-1],this._hoveredNodeID=i-1,this._setNodeColor(16711680);const t=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeHover",{node:this._hoveredNode,...t,scale:this._controls.scale}),this._render()}return!0}return null!==this._hoveredNode&&(this._setNodeColor(this._hoveredNode.color),this.onEvent.emit("nodeUnhover",{node:this._hoveredNode}),this._hoveredNode=null,this._hoveredNodeID=null,this._render()),!1}return!1}_testEdge(t){if(this._pickingTexture){this._renderer.render(this._pickingLineScene,this._camera,this._pickingTexture);const e=new Uint8Array(4);this._renderer.readRenderTargetPixels(this._pickingTexture,t.x,this._pickingTexture.height-t.y,1,1,e);const i=e[0]<<16|e[1]<<8|e[2];i?this._hoveredEdgeID!==i-1&&(null!==this._hoveredEdge&&(this._setEdgeColor(this._hoveredEdge.color),this._setEdgeSize(this._hoveredEdge.size)),null!==this._hoveredNode&&this._setNodeColor(this._hoveredNode.color),this._hoveredEdge=this._edges[i-1],this._hoveredEdgeID=i-1,this._setEdgeColor(16711680),this._setEdgeSize(this._hoveredEdge.size<5?5:this._hoveredEdge.size),this.onEvent.emit("edgeHover",{edge:this._hoveredEdge,...t}),this._render()):null!==this._hoveredEdge&&(this._setEdgeColor(this._hoveredEdge.color),this._setEdgeSize(this._hoveredEdge.size),this.onEvent.emit("edgeUnhover",{edge:this._hoveredEdge}),this._hoveredEdge=null,this._hoveredEdgeID=null,this._render())}}_setEdgeSize(t){if(this._hoveredEdge._lineSizeRange){const e=this._hoveredEdge._lineSizeRange[1]-this._hoveredEdge._lineSizeRange[0];if(e>1)for(let e=this._hoveredEdge._lineSizeRange[0];e<this._hoveredEdge._lineSizeRange[1]/2+2;e++)this._lineGeometry.attributes.linewidth.setX(e,t);else this._lineGeometry.attributes.linewidth.setX(this._hoveredEdge._lineSizeRange[0],t);if(this._lineGeometry.attributes.linewidth.updateRange={offset:this._hoveredEdge._lineSizeRange[0],count:e},this._lineGeometry.attributes.linewidth.needsUpdate=!0,e>1)for(let e=this._hoveredEdge._lineSizeRange[0];e<this._hoveredEdge._lineSizeRange[1]/2+2;e++)this._linesPickingGeometry.attributes.linewidth.setX(e,t);else this._linesPickingGeometry.attributes.linewidth.setX(this._hoveredEdge._lineSizeRange[0],t);this._linesPickingGeometry.attributes.linewidth.updateRange={offset:this._hoveredEdge._lineSizeRange[0],count:e},this._linesPickingGeometry.attributes.linewidth.needsUpdate=!0,this._render()}}_setEdgeColor(t){(new n.Color).setHex(t),null!==this._hoveredEdgeID&&this._render()}_setNodeColor(t){const e=new n.Color;e.setHex(t),null!==this._hoveredNodeID&&(this._nodeColorAttribute.setXYZ(this._hoveredNodeID,e.r,e.g,e.b),this._nodeColorAttribute.needsUpdate=!0,this._render())}_translateCoordinates(t,e){const i=new n.Vector3(t,e,0),s=.5*this._renderer.context.canvas.width,r=.5*this._renderer.context.canvas.height;return i.project(this._camera),i.x=i.x*s+s,i.y=-i.y*r+r,{x:i.x,y:i.y}}_drawNodes(){const t=new n.Color,e=new Float32Array(3*this._nodes.length),i=new Float32Array(3*this._nodes.length),s=new Float32Array(this._nodes.length),r=new Float32Array(this._nodes.length);for(let n=0,o=0,a=this._nodes.length;n<a;n++,o+=3)if(e[o+0]=this._nodes[n].x,e[o+1]=this._nodes[n].y,e[o+2]=0,t.setHex(this._nodes[n].color),i[o+0]=t.r,i[o+1]=t.g,i[o+2]=t.b,s[n]=this._nodes[n].size,this._nodes[n].img){const t=this._imageCanvas.loadImage(this._nodes[n].img);this._nodes[n]._imageIndex=t,r[n]=t}else r[n]=-1;const a=new n.BufferGeometry;this._nodesGeometry=new n.InstancedBufferGeometry,this._nodesGeometry.index=a.index,this._nodesGeometry.attributes=a.attributes,this._nodesGeometry.addAttribute("position",new n.BufferAttribute(new Float32Array([0,0,0]),3)),this._nodeTranslateAttribute=new n.InstancedBufferAttribute(e,3),this._nodeColorAttribute=new n.InstancedBufferAttribute(i,3),this._nodesGeometry.addAttribute("translation",this._nodeTranslateAttribute),this._nodesGeometry.addAttribute("color",this._nodeColorAttribute),this._nodesGeometry.addAttribute("size",new n.InstancedBufferAttribute(s,1)),this._nodesGeometry.addAttribute("image",new n.InstancedBufferAttribute(r,1)),this._nodesMaterial=new n.RawShaderMaterial({depthTest:!1,fragmentShader:h,transparent:!1,uniforms:{scale:{type:"f",value:this._controls?this._controls.scale:1},spriteDim:{value:new n.Vector2(this._imageCanvas.textureWidth,this._imageCanvas.textureHeight)},textureDim:{value:new n.Vector2(this._imageCanvas.canvasWidth,this._imageCanvas.canvasHeight)},textureMap:{type:"t",value:this._imageCanvas.textureMap}},vertexShader:o}),this._nodeMesh=new n.Points(this._nodesGeometry,this._nodesMaterial),this._nodeMesh.frustumCulled=!1,this._nodeMesh.renderOrder=10,this._scene.add(this._nodeMesh);const d=new Float32Array(3*this._nodes.length);for(let e=0,i=0,n=this._nodes.length;e<n;e++,i+=3)t.setHex(e+1),d[i+0]=t.r,d[i+1]=t.g,d[i+2]=t.b;this._nodesPickingMaterial=new n.RawShaderMaterial({fragmentShader:l,uniforms:{scale:{type:"f",value:this._controls?this._controls.scale:1}},vertexShader:c});const u=this._nodeMesh.clone();this._nodesPickingGeometry=u.geometry.clone(),this._nodesPickingGeometry.addAttribute("color",new n.InstancedBufferAttribute(d,3)),this._nodesPickingsMesh=new n.Points(this._nodesPickingGeometry,this._nodesPickingMaterial),this._nodesPickingsMesh.frustumCulled=!1,this._pickingNodesScene.add(this._nodesPickingsMesh),this._pickingNodesScene.updateMatrixWorld(!0),this._render()}_drawEdges(){const t=this._constructLines(this._edges);this._lineGeometry=new p,this._lineGeometry.setPositions(t.positions),this._lineGeometry.setColors(t.colors),this._lineGeometry.addAttribute("linewidth",new n.InstancedBufferAttribute(new Float32Array(t.sizes),1)),this._lineGeometry.attributes.instanceStart.data.dynamic=!0,this._lineGeometry.attributes.instanceEnd.data.dynamic=!0,this._lineMaterial=new _({dashed:!1,depthTest:!1,scale:this._controls?this._controls.scale:1,vertexColors:n.VertexColors});const e=this._container.getBoundingClientRect();this._lineMaterial.useColor=1,this._lineMaterial.resolution.set(e.width,e.height),this._lineMesh=new x(this._lineGeometry,this._lineMaterial),this._lineMesh.computeLineDistances(),this._scene.add(this._lineMesh);const i=this._lineMesh.clone();this._linesPickingGeometry=new p,this._linesPickingGeometry.setPositions(t.positions),this._linesPickingGeometry.setColors(t.pickingColors),this._linesPickingGeometry.addAttribute("linewidth",new n.InstancedBufferAttribute(new Float32Array(t.sizes),1)),this._linesPickingGeometry.attributes.instanceStart.data.dynamic=!0,this._linesPickingGeometry.attributes.instanceEnd.data.dynamic=!0,i.geometry=this._linesPickingGeometry,this._pickingLineScene.add(i),this._pickingLineScene.updateMatrixWorld(!0),this._render()}_drawArrows(){this._arrowGeometry=new n.BufferGeometry;const{vertices:t,normals:e,colors:i}=this._calculateArrowData();this._arrowGeometry.addAttribute("position",new n.BufferAttribute(t,3).setDynamic(!0)),this._arrowGeometry.addAttribute("normal",new n.Float32BufferAttribute(e,3).setDynamic(!0)),this._arrowGeometry.addAttribute("color",new n.Float32BufferAttribute(i,3).setDynamic(!0)),this._arrowGeometry.computeBoundingSphere(),this._arrowMaterial=new n.MeshBasicMaterial({depthTest:!1,side:n.BackSide,vertexColors:n.VertexColors}),this._arrowMesh=new n.Mesh(this._arrowGeometry,this._arrowMaterial),this._scene.add(this._arrowMesh),this._render()}_drawLabels(){const t=new Float32Array(3*this._nodes.length),e=new Float32Array(this._nodes.length),i=new Float32Array(this._nodes.length);for(let n=0,s=0,r=this._nodes.length;n<r;n++,s+=3)if(t[s+0]=this._nodes[n].x+this._textCanvas.textureWidth/2,t[s+1]=this._nodes[n].y,t[s+2]=0,i[n]=this._nodes[n].size,this._nodes[n].label){const t=this._textCanvas.drawText(this._nodes[n].label,{color:"black",font:"Arial",fontSize:30});this._nodes[n]._labelIndex=t,e[n]=t}else e[n]=-1;const s=new n.PlaneBufferGeometry(this._textCanvas.textureWidth,this._textCanvas.textureHeight);this._labelsGeometry=new n.InstancedBufferGeometry,this._labelsGeometry.index=s.index,this._labelsGeometry.attributes=s.attributes,this._labelsTranslateAttribute=new n.InstancedBufferAttribute(t,3),this._labelsGeometry.addAttribute("translation",this._labelsTranslateAttribute),this._labelsGeometry.addAttribute("size",new n.InstancedBufferAttribute(i,1)),this._labelsGeometry.addAttribute("image",new n.InstancedBufferAttribute(e,1)),this._labelsMaterial=new n.RawShaderMaterial({depthTest:!1,fragmentShader:d,transparent:!0,uniforms:{scale:{type:"f",value:this._controls?this._controls.scale:1},spriteDim:{value:new n.Vector2(this._textCanvas.textureWidth,this._textCanvas.textureHeight)},textureDim:{value:new n.Vector2(this._textCanvas.canvasWidth,this._textCanvas.canvasHeight)},textureMap:{type:"t",value:this._textCanvas.textureMap}},vertexShader:a}),this._labelsMesh=new n.Mesh(this._labelsGeometry,this._labelsMaterial),this._labelsMesh.frustumCulled=!1,this._scene.add(this._labelsMesh),this._render()}_setupScene(){this._scene=new n.Scene,this._scene.background=new n.Color(this.options.backgroundColor||"white")}_setupPickingScene(){this._pickingNodesScene=new n.Scene,this._pickingNodesScene.background=new n.Color(0),this._pickingLineScene=new n.Scene,this._pickingNodesScene.background=new n.Color(0)}_setupCamera(){const t=this._container.getBoundingClientRect();this._camera=new n.PerspectiveCamera(this._fov,t.width/t.height,.1,this._far),this._camera.lookAt(0,0,0)}_setupRenderer(){this._renderer=new n.WebGLRenderer({alpha:!0,antialias:!0}),this._renderer.setPixelRatio(window.devicePixelRatio);const t=this._container.getBoundingClientRect();this._renderer.setSize(t.width,t.height),this._container.appendChild(this._renderer.domElement)}_render(){console.log("Render draw calls: ",this._renderer.info.render.calls),this._renderer.render(this._scene,this._camera)}_constructLines(t){const e=[],i=[],s=[],r=[],o=new n.Color,a=new n.Color;return t.forEach((t,h)=>{const d=Math.atan2(t.target.y-t.source.y,t.target.x-t.source.x),c=t.source.x+t.source.size/2*7*Math.cos(d),l=t.source.y+t.source.size/2*7*Math.sin(d),u=t.target.x-(t.target.size/2*7+2*t.size)*Math.cos(d),_=t.target.y-(t.target.size/2*7+2*t.size)*Math.sin(d);if(o.setHex(t.color),a.setHex(h+1),t.source.x===t.target.x&&t.source.y===t.target.y){const h=new n.Vector3(t.source.x,t.source.y||0,0),d=new n.Vector3(t.target.x,t.target.y||0,0),c=15*t.source.size,l=-0,u=l+Math.PI/2,_=new n.CubicBezierCurve3(h,new n.Vector3(c*Math.cos(u),c*Math.sin(u),0).add(h),new n.Vector3(c*Math.cos(l),c*Math.sin(l),0).add(h),d).getPoints(50);let p;t._lineSizeRange=[s.length,s.length+2*_.length];for(let n=0;n<_.length-1;n+=2)p?(e.push(p.x,p.y,0,_[n].x,_[n].y,0,_[n].x,_[n].y,0,_[n+1].x,_[n+1].y,0),s.push(t.size,t.size),i.push(o.r,o.g,o.b,o.r,o.g,o.b,o.r,o.g,o.b,o.r,o.g,o.b),r.push(a.r,a.g,a.b,a.r,a.g,a.b,a.r,a.g,a.b,a.r,a.g,a.b)):(e.push(_[n].x,_[n].y,0,_[n+1].x,_[n+1].y,0),s.push(t.size),i.push(o.r,o.g,o.b,o.r,o.g,o.b),r.push(a.r,a.g,a.b,a.r,a.g,a.b)),p=_[n+1]}else e.push(c,l,0,u,_,0),t._lineSizeRange=[s.length,s.length+1],s.push(t.size),i.push(o.r,o.g,o.b,o.r,o.g,o.b),r.push(a.r,a.g,a.b,a.r,a.g,a.b)}),{colors:i,pickingColors:r,positions:e,sizes:s}}_calculateArrowVertices(t,e,i){const n=i.size/2*7-.4,s=e.x-i.x,r=e.y-i.y,o=Math.atan2(r,s),a=Math.sqrt(s*s+r*r),h=i.x+n*Math.cos(o),d=i.y+n*Math.sin(o),c=t.size,l=[h+2*t.size*s/a,d+2*t.size*r/a];return{pointAbove:[l[0]+c*-r/a,l[1]+c*s/a],pointBelow:[l[0]-c*-r/a,l[1]-c*s/a],pointOnLine:[h,d]}}_calculateNormals(t){const e=new n.Vector3,i=new n.Vector3,s=new n.Vector3,r=new n.Vector3,o=new n.Vector3;return e.set(t.pointBelow[0],t.pointBelow[1],0),i.set(t.pointAbove[0],t.pointAbove[1],0),s.set(t.pointOnLine[0],t.pointOnLine[1],0),r.subVectors(s,i),o.subVectors(e,i),r.cross(o),r.normalize(),{nx:r.x,ny:r.y,nz:r.z}}_calculateArrowData(){const t=new Float32Array(9*this._edges.length),e=new Float32Array(9*this._edges.length),i=new Float32Array(9*this._edges.length),s=new n.Color;for(let n=0,r=0,o=this._edges.length;n<o;n++,r+=9){if(s.setHex(this._edges[n].color),this._edges[n].target.id===this._edges[n].source.id)continue;const o=this._calculateArrowVertices(this._edges[n],this._edges[n].source,this._edges[n].target);t[r+0]=o.pointBelow[0],t[r+1]=o.pointBelow[1],t[r+2]=0,t[r+3]=o.pointOnLine[0],t[r+4]=o.pointOnLine[1],t[r+5]=0,t[r+6]=o.pointAbove[0],t[r+7]=o.pointAbove[1],t[r+8]=0;const a=this._calculateNormals(o);e[r+0]=a.nx,e[r+1]=a.ny,e[r+2]=a.nz,e[r+3]=a.nx,e[r+4]=a.ny,e[r+5]=a.nz,e[r+6]=a.nx,e[r+7]=a.ny,e[r+8]=a.nz,i[r+0]=s.r,i[r+1]=s.g,i[r+2]=s.b,i[r+3]=s.r,i[r+4]=s.g,i[r+5]=s.b,i[r+6]=s.r,i[r+7]=s.g,i[r+8]=s.b}return{colors:i,normals:e,vertices:t}}}i.d(e,"PretyGraph",function(){return b})}])});