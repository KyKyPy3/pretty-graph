!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("three")):"function"==typeof define&&define.amd?define("prettyGraphCore",["three"],t):"object"==typeof exports?exports.prettyGraphCore=t(require("three")):e.prettyGraphCore=t(e.three)}("undefined"!=typeof self?self:this,function(e){return function(e){var t={};function i(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=1)}([function(t,i){t.exports=e},function(e,t,i){"use strict";i.r(t);var n,s,r,o,a,d=i(0),h=function(){function e(){this.events={}}return e.prototype.on=function(e,t){var i=this;return"object"!=typeof this.events[e]&&(this.events[e]=[]),this.events[e].push(t),function(){return i.removeListener(e,t)}},e.prototype.removeListener=function(e,t){if("object"==typeof this.events[e]){var i=this.events[e].indexOf(t);i>-1&&this.events[e].splice(i,1)}},e.prototype.removeAllListeners=function(){var e=this;Object.keys(this.events).forEach(function(t){return e.events[t].splice(0,e.events[t].length)})},e.prototype.emit=function(e){for(var t=this,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];"object"==typeof this.events[e]&&this.events[e].slice().forEach(function(e){return e.apply(t,i)})},e.prototype.once=function(e,t){var i=this,n=this.on(e,function(){for(var e=[],s=0;s<arguments.length;s++)e[s]=arguments[s];n(),t.apply(i,e)});return n},e}(),l=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),c=function(e){function t(){var t=e.call(this)||this;return t.textureWidth=0,t.textureHeight=0,t.canvasHeight=4096,t.canvasWidth=4096,t._nodeImageToIndex={},t._textureIndex=0,t.canvas=document.createElement("canvas"),t.canvas.width=t.canvasWidth,t.canvas.height=t.canvasHeight,t.textureWidth=t.canvasWidth/32,t.textureHeight=t.canvasHeight/32,t._ctx=t.canvas.getContext("2d"),t._ctx&&(t._ctx.fillStyle="white",t._ctx.clearRect(0,0,t.canvas.width,t.canvas.height)),t.textureMap=new d.CanvasTexture(t.canvas),t.textureMap.flipY=!1,t}return l(t,e),t.prototype.dispose=function(){this.textureMap.dispose()},t.prototype.loadImage=function(e){var t=this;if(void 0!==this._nodeImageToIndex[e])return this._nodeImageToIndex[e];if(this._ctx){var i=this._textureIndex;this._textureIndex+=1,this._nodeImageToIndex[e]=i;var n=new Image;return n.onload=function(){var e=i*t.textureWidth%t.canvasWidth,s=Math.floor(i*t.textureWidth/t.canvasWidth)*t.textureHeight;t._ctx&&t._ctx.drawImage(n,0,0,n.width,n.height,e,s,t.textureWidth,t.textureHeight),t.textureMap.needsUpdate=!0,t.dispatchEvent({index:i,type:"imageLoaded"})},n.src=e,i}return-1},t}(d.EventDispatcher),_=function(){var e=function(t,i){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(t,i)};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),u=function(e){function t(t,i){var n=e.call(this)||this;return n._nodeScalingFactor=1,n._arrows=[],n._scene=t,n._nodeScalingFactor=i,n}return _(t,e),t.prototype.addArrow=function(e,t,i,n){this._arrows.push({color:n,size:i,source:e,target:t})},t.prototype.hide=function(){this._arrowMesh.visible=!1},t.prototype.show=function(){this._arrowMesh.visible=!0},t.prototype.reset=function(){this._arrows=[]},t.prototype.recalculate=function(){var e=this._calculateArrowData(),t=e.vertices,i=e.normals;this._arrowGeometry.attributes.position.array=t,this._arrowGeometry.attributes.normal.array=i,this._arrowGeometry.attributes.position.needsUpdate=!0,this._arrowGeometry.attributes.normal.needsUpdate=!0},t.prototype.draw=function(){this._arrowGeometry=new d.BufferGeometry;var e=this._calculateArrowData(),t=e.vertices,i=e.normals,n=e.colors;this._arrowGeometry.addAttribute("position",new d.BufferAttribute(t,3).setDynamic(!0)),this._arrowGeometry.addAttribute("normal",new d.Float32BufferAttribute(i,3).setDynamic(!0)),this._arrowGeometry.addAttribute("color",new d.Float32BufferAttribute(n,3).setDynamic(!0)),this._arrowMaterial=new d.ShaderMaterial({depthTest:!1,fragmentShader:"\n  precision highp float;\n\n  varying vec3 vColor;\n\n  void main() {\n    gl_FragColor = vec4(vColor, 1.0);\n  }\n",side:d.BackSide,transparent:!1,vertexColors:d.VertexColors,vertexShader:"\n  precision mediump float;\n\n  attribute vec3 translation; // x y translation offsets for an instance\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = color;\n\n    vec3 pos = position + translation;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n  }\n"}),this._arrowMesh=new d.Mesh(this._arrowGeometry,this._arrowMaterial),this._scene.add(this._arrowMesh)},t.prototype.dispose=function(){this._arrowMesh&&this._scene.remove(this._arrowMesh),this._arrowMaterial&&this._arrowMaterial.dispose(),this._arrowGeometry&&this._arrowGeometry.dispose()},t.prototype._calculateArrowData=function(){for(var e=new Float32Array(9*this._arrows.length),t=new Float32Array(9*this._arrows.length),i=new Float32Array(9*this._arrows.length),n=new d.Color,s=0,r=0,o=this._arrows.length;s<o;s++,r+=9){n.setHex(this._arrows[s].color);var a=this._calculateArrowVertices(this._arrows[s].size,this._arrows[s].source,this._arrows[s].target);e[r+0]=a.pointBelow[0]||0,e[r+1]=a.pointBelow[1]||0,e[r+2]=0,e[r+3]=a.pointOnLine[0]||0,e[r+4]=a.pointOnLine[1]||0,e[r+5]=0,e[r+6]=a.pointAbove[0]||0,e[r+7]=a.pointAbove[1]||0,e[r+8]=0;var h=this._calculateNormals(a);t[r+0]=h.nx,t[r+1]=h.ny,t[r+2]=h.nz,t[r+3]=h.nx,t[r+4]=h.ny,t[r+5]=h.nz,t[r+6]=h.nx,t[r+7]=h.ny,t[r+8]=h.nz,i[r+0]=n.r,i[r+1]=n.g,i[r+2]=n.b,i[r+3]=n.r,i[r+4]=n.g,i[r+5]=n.b,i[r+6]=n.r,i[r+7]=n.g,i[r+8]=n.b}return{colors:i,normals:t,vertices:e}},t.prototype._calculateArrowVertices=function(e,t,i){var n=i.size/2*this._nodeScalingFactor-.4,s=t.x-i.x,r=t.y-i.y,o=Math.atan2(r,s),a=Math.sqrt(s*s+r*r),d=i.x+n*Math.cos(o),h=i.y+n*Math.sin(o),l=e<6?6:e,c=e<6?12:2*e,_=[d+c*s/a,h+c*r/a];return{pointAbove:[_[0]+l*-r/a,_[1]+l*s/a],pointBelow:[_[0]-l*-r/a,_[1]-l*s/a],pointOnLine:[d,h]}},t.prototype._calculateNormals=function(e){var t=new d.Vector3,i=new d.Vector3,n=new d.Vector3,s=new d.Vector3,r=new d.Vector3;return t.set(e.pointBelow[0],e.pointBelow[1],0),i.set(e.pointAbove[0],e.pointAbove[1],0),n.set(e.pointOnLine[0],e.pointOnLine[1],0),s.subVectors(n,i),r.subVectors(t,i),s.cross(r),s.normalize(),{nx:s.x,ny:s.y,nz:s.z}},t}(d.EventDispatcher),p=function(){var e=function(t,i){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(t,i)};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),v=function(e){function t(){var t=e.call(this)||this;return t.textureWidth=0,t.textureHeight=0,t.canvasHeight=4096,t.canvasWidth=4096,t._textOptionsToIndex={},t._textureIndex=0,t.canvas=document.createElement("canvas"),t.canvas.width=t.canvasWidth,t.canvas.height=t.canvasHeight,t.textureWidth=t.canvasWidth/8,t.textureHeight=30,t._ctx=t.canvas.getContext("2d"),t._ctx&&(t._ctx.fillStyle="white",t._ctx.clearRect(0,0,t.canvas.width,t.canvas.height)),t.textureMap=new d.CanvasTexture(t.canvas),t.textureMap.flipY=!1,t}return p(t,e),t.prototype.dispose=function(){this.textureMap.dispose()},t.prototype.drawText=function(e,t){var i=e;if(void 0!==this._textOptionsToIndex[i])return this._textOptionsToIndex[i];if(this._ctx){var n=this._textureIndex;this._textureIndex+=1,this._textOptionsToIndex[i]=n;var s=18/this.textureWidth,r=Math.round(s*this.textureWidth),o=n*this.textureWidth%this.canvasWidth,a=Math.floor(n*this.textureWidth/this.canvasWidth)*this.textureHeight;return this._ctx.beginPath(),this._ctx.fillStyle="white",this._ctx.clearRect(o,a,this.textureWidth,this.textureHeight),this._ctx.beginPath(),this._ctx.fillStyle=t.color,this._ctx.font=r+"px "+t.font,this._ctx.textAlign="start",this._ctx.textBaseline="middle",this._ctx.fillText(e,o+5,a+.5*this.textureHeight),this.textureMap.needsUpdate=!0,n}return-1},t}(d.EventDispatcher),f=function(){var e=function(t,i){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(t,i)};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),g=function(e){function t(t,i){var n=e.call(this)||this;return n._labels=[],n._nodeScalingFactor=1,n._scene=t,n._nodeScalingFactor=i,n._textCanvas=new v,n}return f(t,e),t.prototype.addLabel=function(e,t,i,n){var s=this._labels.length;return this._labels.push({nodeSize:n,text:e,x:t,y:i}),s},t.prototype.show=function(){this._labelsMesh.visible=!0},t.prototype.hide=function(){this._labelsMesh.visible=!1},t.prototype.setLabelPosition=function(e,t,i){void 0===i&&(i=!0),this._labels[e].x=t.x,this._labels[e].y=t.y,i&&(this._labelsInstancedGeometry.attributes.translation.setXYZ(e,t.x+this._textCanvas.textureWidth/2,t.y,0),this._labelsInstancedGeometry.attributes.translation.needsUpdate=!0)},t.prototype.draw=function(){for(var e=new Float32Array(3*this._labels.length),t=new Float32Array(this._labels.length),i=new Float32Array(this._labels.length),n=0,s=0,r=this._labels.length;n<r;n++,s+=3){e[s+0]=this._labels[n].x+this._textCanvas.textureWidth/2,e[s+1]=this._labels[n].y,e[s+2]=0,i[n]=this._labels[n].nodeSize;var o=this._textCanvas.drawText(this._labels[n].text,{color:"black",font:"Arial"});this._labels[n]._labelIndex=o,t[n]=o}this._labelsBufferGeometry=new d.PlaneBufferGeometry(this._textCanvas.textureWidth,this._textCanvas.textureHeight),this._labelsInstancedGeometry=new d.InstancedBufferGeometry,this._labelsInstancedGeometry.index=this._labelsBufferGeometry.index,this._labelsInstancedGeometry.attributes=this._labelsBufferGeometry.attributes,this._labelsTranslateAttribute=new d.InstancedBufferAttribute(e,3),this._labelsInstancedGeometry.addAttribute("translation",this._labelsTranslateAttribute),this._labelsInstancedGeometry.addAttribute("size",new d.InstancedBufferAttribute(i,1)),this._labelsInstancedGeometry.addAttribute("image",new d.InstancedBufferAttribute(t,1)),this._labelsMaterial=new d.RawShaderMaterial({depthTest:!1,fragmentShader:"\n  precision highp float;\n\n  uniform sampler2D textureMap;\n\n  varying highp vec4 v_sprite;\n  varying vec2 vUv;\n\n  void main() {\n    vec2 uv = vec2( vUv.x, 1.0 - vUv.y );\n    gl_FragColor = texture2D(textureMap, vec2((v_sprite.s + v_sprite.p * uv.x), (v_sprite.t + v_sprite.q * uv.y)));\n  }\n",transparent:!0,uniforms:{nodeScalingFactor:{type:"f",value:this._nodeScalingFactor},spriteDim:{value:new d.Vector2(this._textCanvas.textureWidth,this._textCanvas.textureHeight)},textureDim:{value:new d.Vector2(this._textCanvas.canvasWidth,this._textCanvas.canvasHeight)},textureMap:{type:"t",value:this._textCanvas.textureMap}},vertexShader:"\n  precision mediump float;\n\n  uniform mat4 modelViewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform vec2 spriteDim;\n  uniform vec2 textureDim;\n  uniform float nodeScalingFactor;\n\n  attribute vec3 position;\n  attribute vec3 translation;\n  attribute float image;\n  attribute float size;\n  attribute vec2 uv;\n\n  varying highp vec4 v_sprite;\n  varying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n\n    highp vec2 sp = vec2(mod((image * spriteDim.x), textureDim.x), floor((image * spriteDim.x) / textureDim.y) * spriteDim.y);\n    v_sprite = vec4(sp.x / textureDim.x, sp.y / textureDim.y, spriteDim.x / textureDim.x, spriteDim.y / textureDim.y);\n\n    vec3 pos = position + translation;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos.x + nodeScalingFactor * (size / 2.0), pos.y, pos.z, 1.0);\n  }\n"}),this._labelsMesh=new d.Mesh(this._labelsInstancedGeometry,this._labelsMaterial),this._labelsMesh.frustumCulled=!1,this._labelsMesh.name="Labels",this._scene.add(this._labelsMesh)},t.prototype.recalculate=function(){for(var e=new Float32Array(3*this._labels.length),t=0,i=0,n=this._labels.length;t<n;t++,i+=3)e[i+0]=this._labels[t].x+this._textCanvas.textureWidth/2,e[i+1]=this._labels[t].y,e[i+2]=0;this._labelsInstancedGeometry.attributes.translation.setArray(e),this._labelsInstancedGeometry.attributes.translation.needsUpdate=!0},t.prototype.dispose=function(){this._labelsMesh&&this._scene.remove(this._labelsMesh),this._labelsMaterial&&this._labelsMaterial.dispose(),this._labelsInstancedGeometry&&this._labelsInstancedGeometry.dispose(),this._labelsBufferGeometry&&this._labelsBufferGeometry.dispose(),this._textCanvas&&this._textCanvas.dispose()},t}(d.EventDispatcher);function m(e){d.ShaderMaterial.call(this,{type:"LineMaterial",uniforms:d.UniformsUtils.clone(d.ShaderLib.line.uniforms),vertexShader:d.ShaderLib.line.vertexShader,fragmentShader:d.ShaderLib.line.fragmentShader}),this.dashed=!1,Object.defineProperties(this,{color:{enumerable:!0,get:function(){return this.uniforms.diffuse.value},set:function(e){this.uniforms.diffuse.value=e}},useColor:{enumerable:!0,get:function(){return this.uniforms.useColor.value},set:function(e){this.uniforms.useColor.value=e}},dashScale:{enumerable:!0,get:function(){return this.uniforms.dashScale.value},set:function(e){this.uniforms.dashScale.value=e}},dashSize:{enumerable:!0,get:function(){return this.uniforms.dashSize.value},set:function(e){this.uniforms.dashSize.value=e}},gapSize:{enumerable:!0,get:function(){return this.uniforms.gapSize.value},set:function(e){this.uniforms.gapSize.value=e}},scale:{enumerable:!0,get:function(){return this.uniforms.scale.value},set:function(e){this.uniforms.scale.value=e}},resolution:{enumerable:!0,get:function(){return this.uniforms.resolution.value},set:function(e){this.uniforms.resolution.value.copy(e)}}}),this.setValues(e)}function y(){d.InstancedBufferGeometry.call(this),this.type="LineSegmentsGeometry";this.setIndex([0,2,1,2,3,1,2,4,3,4,5,3,4,6,5,6,7,5]),this.addAttribute("position",new d.Float32BufferAttribute([-1,2,0,1,2,0,-1,1,0,1,1,0,-1,0,0,1,0,0,-1,-1,0,1,-1,0],3)),this.addAttribute("uv",new d.Float32BufferAttribute([-1,2,1,2,-1,1,1,1,-1,-1,1,-1,-1,-2,1,-2],2))}function x(e,t){d.Mesh.call(this),this.type="LineSegments2",this.geometry=void 0!==e?e:new y,this.material=void 0!==t?t:new m({color:16777215*Math.random()})}function b(e,t){x.call(this),this.type="Line2",this.geometry=void 0!==e?e:new d.LineGeometry,this.material=void 0!==t?t:new d.LineMaterial({color:16777215*Math.random()})}d.UniformsLib.line={resolution:{value:new d.Vector2(1,1)},dashScale:{value:1},useColor:{value:0},dashSize:{value:1},scale:{value:1},gapSize:{value:1}},d.ShaderLib.line={uniforms:d.UniformsUtils.merge([d.UniformsLib.common,d.UniformsLib.fog,d.UniformsLib.line]),vertexShader:"\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n    uniform vec2 resolution;\n    uniform float scale;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n    attribute float linewidth;\n    attribute float dashed;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n    varying vec2 vUv;\n    varying float vDashed;\n\n    uniform float dashScale;\n    attribute float instanceDistanceStart;\n    attribute float instanceDistanceEnd;\n    varying float vLineDistance;\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\tif (dashed > 0.5) {\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\n      }\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n      vUv = uv;\n      vDashed = dashed;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec2 ndcStart = clipStart.xy / clipStart.w;\n\t\t\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd - ndcStart;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t// perpendicular to dir\n\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\n\t\t\t// undo aspect ratio adjustment\n\t\t\tdir.x /= aspect;\n\t\t\toffset.x /= aspect;\n\n\t\t\t// sign flip\n\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t// endcaps\n\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\toffset += - dir;\n\n\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\toffset += dir;\n\n\t\t\t}\n\n      // adjust for linewidth\n      if (scale > 1.0)\n        offset *= linewidth * scale;\n      else\n        offset *= linewidth;\n\n\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\toffset /= resolution.y;\n\n\t\t\t// select end\n\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t// back to clip space\n\t\t\toffset *= clip.w;\n\n\t\t\tclip.xy += offset;\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t",fragmentShader:"\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\t\tuniform float useColor;\n\n    uniform float dashSize;\n    uniform float gapSize;\n\n\t\tvarying float vLineDistance;\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n    varying vec2 vUv;\n    varying float vDashed;\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\tif (vDashed > 0.5) {\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n      }\n\n\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\tfloat a = vUv.x;\n\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t}\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tif (useColor == 1.0) {\n\t\t\t\tgl_FragColor = vec4( vColor, 1.0 );\n\t\t\t} else {\n\t\t\t\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\n\t\t\t}\n\n\t\t\t#include <premultiplied_alpha_fragment>\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\n\t\t}\n\t\t"},m.prototype=Object.create(d.ShaderMaterial.prototype),m.prototype.constructor=m,m.prototype.isLineMaterial=!0,m.prototype.copy=function(e){return d.ShaderMaterial.prototype.copy.call(this,e),this.color.copy(e.color),this.resolution=e.resolution,this},y.prototype=Object.assign(Object.create(d.InstancedBufferGeometry.prototype),{constructor:y,isLineSegmentsGeometry:!0,applyMatrix:function(e){var t=this.attributes.instanceStart,i=this.attributes.instanceEnd;return void 0!==t&&(e.applyToBufferAttribute(t),e.applyToBufferAttribute(i),t.data.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},setPositions:function(e){var t;e instanceof Float32Array?t=e:Array.isArray(e)&&(t=new Float32Array(e));var i=new d.InstancedInterleavedBuffer(t,6,1);return this.addAttribute("instanceStart",new d.InterleavedBufferAttribute(i,3,0)),this.addAttribute("instanceEnd",new d.InterleavedBufferAttribute(i,3,3)),this.computeBoundingBox(),this.computeBoundingSphere(),this},setColors:function(e){var t;e instanceof Float32Array?t=e:Array.isArray(e)&&(t=new Float32Array(e));var i=new d.InstancedInterleavedBuffer(t,6,1);return this.addAttribute("instanceColorStart",new d.InterleavedBufferAttribute(i,3,0)),this.addAttribute("instanceColorEnd",new d.InterleavedBufferAttribute(i,3,3)),this},fromWireframeGeometry:function(e){return this.setPositions(e.attributes.position.array),this},fromEdgesGeometry:function(e){return this.setPositions(e.attributes.position.array),this},fromMesh:function(e){return this.fromWireframeGeometry(new d.WireframeGeometry(e.geometry)),this},fromLineSegements:function(e){var t=e.geometry;return t.isGeometry?this.setPositions(t.vertices):t.isBufferGeometry&&this.setPositions(t.position.array),this},computeBoundingBox:(r=new d.Box3,function(){null===this.boundingBox&&(this.boundingBox=new d.Box3);var e=this.attributes.instanceStart,t=this.attributes.instanceEnd;void 0!==e&&void 0!==t&&(this.boundingBox.setFromBufferAttribute(e),r.setFromBufferAttribute(t),this.boundingBox.union(r))}),computeBoundingSphere:(s=new d.Vector3,function(){null===this.boundingSphere&&(this.boundingSphere=new d.Sphere),null===this.boundingBox&&this.computeBoundingBox();var e=this.attributes.instanceStart,t=this.attributes.instanceEnd;if(void 0!==e&&void 0!==t){var i=this.boundingSphere.center;this.boundingBox.getCenter(i);for(var n=0,r=0,o=e.count;r<o;r++)s.fromBufferAttribute(e,r),n=Math.max(n,i.distanceToSquared(s)),s.fromBufferAttribute(t,r),n=Math.max(n,i.distanceToSquared(s));this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error("LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.",this)}}),toJSON:function(){},clone:function(){},copy:function(e){return this}}),x.prototype=Object.assign(Object.create(d.Mesh.prototype),{constructor:x,isLineSegments2:!0,computeLineDistances:(o=new d.Vector3,a=new d.Vector3,function(){for(var e=this.geometry,t=e.attributes.instanceStart,i=e.attributes.instanceEnd,n=new Float32Array(2*t.data.count),s=0,r=0,h=t.data.count;s<h;s++,r+=2)o.fromBufferAttribute(t,s),a.fromBufferAttribute(i,s),n[r]=0===r?0:n[r-1],n[r+1]=n[r]+o.distanceTo(a);var l=new d.InstancedInterleavedBuffer(n,2,1);return e.addAttribute("instanceDistanceStart",new d.InterleavedBufferAttribute(l,1,0)),e.addAttribute("instanceDistanceEnd",new d.InterleavedBufferAttribute(l,1,1)),this}),copy:function(e){return this}}),b.prototype=Object.assign(Object.create(x.prototype),{constructor:b,isLine2:!0,copy:function(e){return this}});var w=function(){return(w=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var s in t=arguments[i])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)},S=function(){function e(e){var t=this;this.onEvent=new h,this.nodeScalingFactor=7,this.animationTime=500,this._options={},this._container=document.body,this._fov=75,this._far=1e4,this._nodes=[],this._edges=[],this._animationFrameRequestId=null,this._center=null,this._hoveredNode=null,this._hoveredEdge=null,this._hoveredEdgeID=null,this._dragInProgress=!1,this._dragging=!1,this._plane=new d.Plane,this._raycaster=new d.Raycaster,this._intersection=new d.Vector3,this._offset=new d.Vector3,this._indexedNodes={},this._colorToNodeID={},this._labelsLayer=null,this.options=e,this.options.container&&(this._container=this.options.container,e.clearContainer&&(this._container.innerHTML="")),this._setupScene(),this._setupCamera(),this._setupRenderer(),this._setupPickingScene(),this._controls=new e.controls(this._camera,this._container),this._controls.init(),this._controls.addEventListener("scale",this._onScale.bind(this)),this._controls.addEventListener("mousemove",this._onMouseMove.bind(this)),this._controls.addEventListener("contextmenu",this._onContextMenu.bind(this)),this._controls.addEventListener("dblclick",this._onDblClick.bind(this)),this._controls.addEventListener("click",this._onClick.bind(this)),this._controls.addEventListener("mousedown",this._onMouseDown.bind(this)),this._controls.addEventListener("mouseup",this._onMouseUp.bind(this)),this._imageLoaded=function(){t._render()},this._imageCanvas=new c,this._render(),this.options.showLabels&&(this._labelsLayer=new g(this._scene,this.nodeScalingFactor)),this._arrowsLayer=new u(this._scene,this.nodeScalingFactor),window.addEventListener("resize",function(){t._renderer.setSize(t._container.clientWidth,t._container.clientHeight),t._camera.aspect=t._container.clientWidth/t._container.clientHeight,t._camera.updateProjectionMatrix(),t._lineMaterial&&(t._lineMaterial.resolution.set(t._container.clientWidth,t._container.clientHeight),t._lineMaterial.needsUpdate=!0),t._pickingTexture=new d.WebGLRenderTarget(t._container.clientWidth,t._container.clientHeight),t._render()})}return Object.defineProperty(e.prototype,"options",{get:function(){return this._options},set:function(e){this._options=e},enumerable:!0,configurable:!0}),e.prototype.setData=function(e,t){void 0===t&&(t={animate:!1}),this._nodes=e.nodes,this._edges=e.links;var i=JSON.parse(JSON.stringify(this._indexedNodes));if(this._indexingNodes(),e.center&&(this._center=this._indexedNodes[e.center],this._center&&this._controls.setTransform(this._center)),this._disposeMesh(),this._disposeMaterials(),this._disposeGeometries(),this._disposeTextures(),this._labelsLayer&&this._labelsLayer.dispose(),this._arrowsLayer.dispose(),this._renderer.clear(),this._renderer.renderLists.dispose(),this._pickingTexture=new d.WebGLRenderTarget(this._container.clientWidth,this._container.clientHeight),this._pickingTexture.texture.minFilter=d.LinearFilter,this._imageCanvas.addEventListener("imageLoaded",this._imageLoaded),t.animate){for(var n in this._indexedNodes)i[n]?(this._indexedNodes[n].toX=this._indexedNodes[n].x,this._indexedNodes[n].toY=this._indexedNodes[n].y,this._indexedNodes[n].fromX=i[n].x,this._indexedNodes[n].fromY=i[n].y,this._indexedNodes[n].x=i[n].x,this._indexedNodes[n].y=i[n].y):(this._indexedNodes[n].toX=this._indexedNodes[n].x,this._indexedNodes[n].toY=this._indexedNodes[n].y,this._center&&this._indexedNodes[n].id===this._center.id?(this._indexedNodes[n].fromX=this._center.x,this._indexedNodes[n].fromY=this._center.y,this._indexedNodes[n].x=this._center.x,this._indexedNodes[n].y=this._center.y):(this._indexedNodes[n].fromX=this._getRandomFromRange(-this._container.clientWidth,this._container.clientWidth),this._indexedNodes[n].fromY=this._getRandomFromRange(-this._container.clientHeight,this._container.clientHeight),this._indexedNodes[n].x=this._getRandomFromRange(-this._container.clientWidth,this._container.clientWidth),this._indexedNodes[n].y=this._getRandomFromRange(-this._container.clientHeight,this._container.clientHeight)));this._drawEdges(),this._arrowsLayer.draw(),this._drawNodes(),this._labelsLayer&&this._labelsLayer.draw(),this._render(),requestAnimationFrame(this._animate.bind(this))}else this._drawEdges(),this._arrowsLayer.draw(),this._drawNodes(),this._labelsLayer&&this._labelsLayer.draw(),this._render()},e.prototype.stopRenderLoop=function(){this._animationFrameRequestId&&cancelAnimationFrame(this._animationFrameRequestId),this._animationFrameRequestId=null},e.prototype.resumeRenderLoop=function(){this._animationFrameRequestId||this._render()},e.prototype.getNodeByID=function(e){var t=this._indexedNodes[e],i=this._translateCoordinates(t.x,t.y);return w({node:t},i,{scale:this._controls.scale})},e.prototype.getScreenshot=function(){var e=new d.WebGLRenderer({premultipliedAlpha:!1,preserveDrawingBuffer:!0,antialias:!0,alpha:!0});return e.setSize(this._container.clientWidth,this._container.clientHeight),e.setPixelRatio(window.devicePixelRatio),e.render(this._scene,this._camera),e.domElement.toDataURL("image/png")},e.prototype.destroy=function(){this._disposeMesh(),this._disposeTextures(),this._disposeMaterials(),this._disposeGeometries(),this.stopRenderLoop(),this._labelsLayer&&this._labelsLayer.dispose(),this._arrowsLayer&&this._arrowsLayer.dispose(),this._disposeRenderer(),this._controls.dispose()},e.prototype._onMouseMove=function(e){var t=e.position;if(this._dragging){var i=new d.Vector3;i.x=t.x/this._container.clientWidth*2-1,i.y=-t.y/this._container.clientHeight*2+1;var n={x:this._hoveredNode.x,y:this._hoveredNode.y};if(this._dragInProgress)this._raycaster.setFromCamera(i,this._camera),this._raycaster.ray.intersectPlane(this._plane,this._intersection),n=this._intersection.sub(this._offset).clone();else{var s=new d.Vector3;this._camera.getWorldDirection(s),this._plane.setFromNormalAndCoplanarPoint(s,new d.Vector3(this._hoveredNode.x,this._hoveredNode.y,0)),this._raycaster.setFromCamera(i,this._camera),this._raycaster.ray.intersectPlane(this._plane,this._intersection),this._offset.copy(this._intersection).sub(new d.Vector3(this._hoveredNode.x,this._hoveredNode.y,0)),n=this._intersection.sub(this._offset).clone(),this._dragInProgress=!0}null!==this._hoveredNode&&(this._nodesGeometry.attributes.translation.setXYZ(this._hoveredNode.__positionIndex,n.x,n.y,0),this._nodesPickingGeometry.attributes.translation.setXYZ(this._hoveredNode.__positionIndex,n.x,n.y,0),this._labelsLayer&&this._hoveredNode.__labelIndex&&this._labelsLayer.setLabelPosition(this._hoveredNode.__labelIndex,{x:n.x,y:n.y,z:0})),this._hoveredNode.x=n.x,this._hoveredNode.y=n.y;var r=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeMoving",w({node:this._hoveredNode},r,{scale:this._controls.scale})),this._nodesGeometry.attributes.translation.needsUpdate=!0,this._nodesPickingGeometry.attributes.translation.needsUpdate=!0;var o=this._constructLines(this._edges);this._lineGeometry.setPositions(o.positions),this._linesPickingGeometry.setPositions(o.positions),this._lineGeometry.attributes.instanceStart.data.needsUpdate=!0,this._lineGeometry.attributes.instanceEnd.data.needsUpdate=!0,this._linesPickingGeometry.attributes.instanceStart.data.needsUpdate=!0,this._linesPickingGeometry.attributes.instanceEnd.data.needsUpdate=!0,this._arrowsLayer.recalculate(),this._render()}else this._testNode(t)||this._testEdge(t)},e.prototype._onMouseUp=function(){this._controls.enabled=!0,this._dragging=!1,this._dragInProgress=!1},e.prototype._onMouseDown=function(e){var t=e.event;if(null!==this._hoveredNode){var i=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeClick",w({node:this._hoveredNode},i,{scale:this._controls.scale})),1===t.buttons&&(this._controls.enabled=!1,this._dragging=!0)}},e.prototype._onClick=function(){this._hoveredNode||this._hoveredEdge||this.onEvent.emit("workspaceClick")},e.prototype._onDblClick=function(){if(null!==this._hoveredNode){var e=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeDblClick",w({node:this._hoveredNode},e,{scale:this._controls.scale}))}},e.prototype._onContextMenu=function(e){if(this._hoveredNode){var t=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeContextMenu",w({node:this._hoveredNode},t,{scale:this._controls.scale}))}else this._hoveredEdge&&this.onEvent.emit("edgeContextMenu",{edge:this._hoveredEdge,coordinates:e,scale:this._controls.scale})},e.prototype._onScale=function(e){if(this._nodesMaterial)if(this._nodesMaterial.uniforms.scale.value=e.scale,this._nodesMaterial.needsUpdate=!0,this._nodesPickingMaterial.uniforms.scale.value=e.scale,this._nodesPickingMaterial.needsUpdate=!0,this._lineMaterial.uniforms.scale.value=e.scale,this._lineMaterial.needsUpdate=!0,this._render(),this._hoveredNode){var t=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeScaling",w({node:this._hoveredNode},t,{scale:this._controls.scale}))}else this.onEvent.emit("workspaceViewChanged",{scale:this._controls.scale})},e.prototype._disposeMesh=function(){this._lineMesh&&this._scene.remove(this._lineMesh),this._nodeMesh&&this._scene.remove(this._nodeMesh),this._nodesPickingsMesh&&this._pickingNodesScene.remove(this._nodesPickingsMesh),this._linePickingMesh&&this._pickingLineScene.remove(this._linePickingMesh)},e.prototype._disposeGeometries=function(){this._nodesGeometry&&this._nodesGeometry.dispose(),this._nodesPickingGeometry&&this._nodesPickingGeometry.dispose(),this._lineGeometry&&this._lineGeometry.dispose(),this._linesPickingGeometry&&this._linesPickingGeometry.dispose()},e.prototype._disposeRenderer=function(){this._renderer&&(this._renderer.clear(),this._renderer.renderLists.dispose(),this._container.removeChild(this._renderer.domElement),this._renderer.dispose())},e.prototype._disposeMaterials=function(){this._nodesMaterial&&this._nodesMaterial.dispose(),this._nodesPickingMaterial&&this._nodesPickingMaterial.dispose(),this._lineMaterial&&this._lineMaterial.dispose()},e.prototype._disposeTextures=function(){this._imageCanvas.removeEventListener("imageLoaded",this._imageLoaded),this._imageCanvas&&this._imageCanvas.dispose(),this._pickingTexture&&this._pickingTexture.dispose()},e.prototype._testNode=function(e){if(this._pickingTexture){this._renderer.render(this._pickingNodesScene,this._camera,this._pickingTexture);var t=new Uint8Array(4);this._renderer.readRenderTargetPixels(this._pickingTexture,e.x,this._pickingTexture.height-e.y,1,1,t);var i=t[0]<<16|t[1]<<8|t[2];if(i){var n=this._indexedNodes[this._colorToNodeID[i]];if(this._hoveredNode!==n){null!==this._hoveredNode&&this._setNodeColor(this._hoveredNode.color),null!==this._hoveredEdge&&(this._setEdgeColor(this._hoveredEdge.color),this._setEdgeSize(this._hoveredEdge.size)),this._hoveredNode=this._indexedNodes[this._colorToNodeID[i]],this._setNodeColor(16711680);var s=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeHover",w({node:this._hoveredNode},s,{scale:this._controls.scale})),this._render()}return!0}return null!==this._hoveredNode&&(this._setNodeColor(this._hoveredNode.color),this.onEvent.emit("nodeUnhover",{node:this._hoveredNode}),this._hoveredNode=null,this._render()),!1}return!1},e.prototype._testEdge=function(e){if(this._pickingTexture){this._renderer.render(this._pickingLineScene,this._camera,this._pickingTexture);var t=new Uint8Array(4);this._renderer.readRenderTargetPixels(this._pickingTexture,e.x,this._pickingTexture.height-e.y,1,1,t);var i=t[0]<<16|t[1]<<8|t[2];i?this._hoveredEdgeID!==i-1&&(null!==this._hoveredEdge&&(this._setEdgeColor(this._hoveredEdge.color),this._setEdgeSize(this._hoveredEdge.size)),null!==this._hoveredNode&&this._setNodeColor(this._hoveredNode.color),this._hoveredEdge=this._edges[i-1],this._hoveredEdgeID=i-1,this._setEdgeColor(16711680),this._setEdgeSize(this._hoveredEdge.size<3?3:this._hoveredEdge.size),this.onEvent.emit("edgeHover",w({edge:this._hoveredEdge},e)),this._render()):null!==this._hoveredEdge&&(this._setEdgeColor(this._hoveredEdge.color),this._setEdgeSize(this._hoveredEdge.size),this.onEvent.emit("edgeUnhover",{edge:this._hoveredEdge}),this._hoveredEdge=null,this._hoveredEdgeID=null,this._render())}},e.prototype._setEdgeSize=function(e){if(this._hoveredEdge._lineSizeRange){var t=this._hoveredEdge._lineSizeRange[1]-this._hoveredEdge._lineSizeRange[0];if(t>1)for(var i=this._hoveredEdge._lineSizeRange[0];i<this._hoveredEdge._lineSizeRange[1]/2+2;i++)this._lineGeometry.attributes.linewidth.setX(i,e);else this._lineGeometry.attributes.linewidth.setX(this._hoveredEdge._lineSizeRange[0],e);if(this._lineGeometry.attributes.linewidth.updateRange={offset:this._hoveredEdge._lineSizeRange[0],count:t},this._lineGeometry.attributes.linewidth.needsUpdate=!0,t>1)for(i=this._hoveredEdge._lineSizeRange[0];i<this._hoveredEdge._lineSizeRange[1]/2+2;i++)this._linesPickingGeometry.attributes.linewidth.setX(i,e);else this._linesPickingGeometry.attributes.linewidth.setX(this._hoveredEdge._lineSizeRange[0],e);this._linesPickingGeometry.attributes.linewidth.updateRange={offset:this._hoveredEdge._lineSizeRange[0],count:t},this._linesPickingGeometry.attributes.linewidth.needsUpdate=!0,this._render()}},e.prototype._setEdgeColor=function(e){(new d.Color).setHex(e),null!==this._hoveredEdgeID&&this._render()},e.prototype._setNodeColor=function(e){var t=new d.Color;t.setHex(e),null!==this._hoveredNode&&(this._nodeColorAttribute.setXYZ(this._hoveredNode.__positionIndex,t.r,t.g,t.b),this._nodeColorAttribute.needsUpdate=!0,this._render())},e.prototype._translateCoordinates=function(e,t){var i=new d.Vector3(e,t,0),n=.5*this._renderer.context.canvas.width,s=.5*this._renderer.context.canvas.height;return i.project(this._camera),i.x=i.x*n+n,i.y=-i.y*s+s,{x:i.x,y:i.y}},e.prototype._drawNodes=function(){for(var e=new d.Color,t=new Float32Array(3*this._nodes.length),i=new Float32Array(3*this._nodes.length),n=new Float32Array(this._nodes.length),s=new Float32Array(this._nodes.length),r=0,o=0,a=this._nodes.length;r<a;r++,o+=3){if(t[o+0]=this._nodes[r].x,t[o+1]=this._nodes[r].y,t[o+2]=0,e.setHex(this._nodes[r].color),i[o+0]=e.r,i[o+1]=e.g,i[o+2]=e.b,n[r]=this._nodes[r].size,this._nodes[r].img){var h=this._imageCanvas.loadImage(this._nodes[r].img);this._nodes[r]._imageIndex=h,s[r]=h}else s[r]=-1;this._nodes[r].__positionIndex=r,this._labelsLayer&&this._nodes[r].label&&(this._nodes[r].__labelIndex=this._labelsLayer.addLabel(this._nodes[r].label,this._nodes[r].x,this._nodes[r].y,this._nodes[r].size))}var l=new d.BufferGeometry;this._nodesGeometry=new d.InstancedBufferGeometry,this._nodesGeometry.index=l.index,this._nodesGeometry.attributes=l.attributes,this._nodesGeometry.addAttribute("position",new d.BufferAttribute(new Float32Array([0,0,0]),3)),this._nodeTranslateAttribute=new d.InstancedBufferAttribute(t,3),this._nodeTranslateAttribute.setDynamic(!0),this._nodeColorAttribute=new d.InstancedBufferAttribute(i,3),this._nodeColorAttribute.setDynamic(!0),this._nodesGeometry.addAttribute("translation",this._nodeTranslateAttribute),this._nodesGeometry.addAttribute("color",this._nodeColorAttribute),this._nodesGeometry.addAttribute("size",new d.InstancedBufferAttribute(n,1)),this._nodesGeometry.addAttribute("image",new d.InstancedBufferAttribute(s,1)),this._nodesMaterial=new d.RawShaderMaterial({depthTest:!1,fragmentShader:"\n  precision highp float;\n\n  uniform sampler2D textureMap;\n\n  varying float vScale;\n  varying float vNodeScaleFactor;\n  varying float vSize;\n  varying vec3 vColor;\n  varying float vImage;\n  varying highp vec4 v_sprite;\n\n  void main() {\n    vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n    float radius = 0.5;\n    float border = 0.0;\n    float distance = 0.0;\n\n    vec2 m = uv - vec2(0.5, 0.5);\n    float dist = radius - sqrt(dot(m, m));\n\n    if (vSize * vNodeScaleFactor * vScale > 40.0) {\n      distance = 0.025;\n      if (0.08 - vSize * (vScale / 1000.0) > 0.04) {\n        border = 0.08 - vSize * (vScale / 1000.0) / 2.0;\n      } else {\n        border = 0.06;\n      }\n\n      float sm = smoothstep(0.0, distance, dist);\n      float sm2 = smoothstep(border, border - distance, dist);\n      float alpha = sm*sm2;\n\n      float tm = smoothstep(border, border + distance, dist);\n\n      if (dist > border)\n        if (vImage > 0.5) {\n          gl_FragColor = vec4(texture2D(textureMap, vec2((v_sprite.s + v_sprite.p * uv.x), (v_sprite.t + v_sprite.q * uv.y))).rgb, tm);\n        } else {\n          gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        }\n      else if (dist > 0.0)\n        gl_FragColor = vec4(vColor, alpha);\n      else discard;\n    } else {\n      distance = 0.1;\n      border = 0.15;\n      float l = vColor.r * 0.3 + vColor.g * 0.59 + vColor.b * 0.11;\n      if (l > 0.5) {\n        // gray\n        if (vScale < 0.5) {\n          distance = 0.1;\n          border = 0.25;\n        } else if (vScale > 10.0) {\n          border = 0.05;\n          distance = 0.016;\n        } else {\n          border = 0.3 - vScale / 50.0;\n          distance = border / 2.5;\n        }\n      }\n\n      float sm = smoothstep(0.0, distance, dist);\n      float sm2 = smoothstep(border, border - distance, dist);\n      float alpha = sm*sm2;\n\n      if (dist > border) {\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n      } else if (dist > 0.0) {\n        gl_FragColor = vec4(vColor, alpha);\n      } else discard;\n    }\n  }\n",transparent:!1,uniforms:{nodeScalingFactor:{type:"f",value:this.nodeScalingFactor},scale:{type:"f",value:this._controls?this._controls.scale:1},spriteDim:{value:new d.Vector2(this._imageCanvas.textureWidth,this._imageCanvas.textureHeight)},textureDim:{value:new d.Vector2(this._imageCanvas.canvasWidth,this._imageCanvas.canvasHeight)},textureMap:{type:"t",value:this._imageCanvas.textureMap}},vertexShader:"\n  precision mediump float;\n\n  uniform mat4 modelViewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float scale;\n  uniform float nodeScalingFactor;\n  uniform vec2 spriteDim;\n  uniform vec2 textureDim;\n\n  attribute vec3 position;    // blueprint's vertex positions\n  attribute vec3 color;       // only used for raycasting\n  attribute vec3 translation; // x y translation offsets for an instance\n  attribute float size;\n  attribute float image;\n\n  varying vec3 vColor;\n  varying float vScale;\n  varying float vNodeScaleFactor;\n  varying float vSize;\n  varying float vImage;\n  varying highp vec4 v_sprite;\n\n  void main() {\n    vColor = color;\n    vScale = scale;\n    vSize = size;\n    vImage = image;\n    vNodeScaleFactor = nodeScalingFactor;\n\n    highp vec2 sp = vec2(mod((image * spriteDim.x), textureDim.x), floor((image * spriteDim.x) / textureDim.y) * spriteDim.y);\n    v_sprite = vec4(sp.x / textureDim.x, sp.y / textureDim.y, spriteDim.x / textureDim.x, spriteDim.y / textureDim.y);\n\n    vec3 pos = position + translation;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n\n    if (size * scale * nodeScalingFactor > 12.0) {\n      gl_PointSize = size * scale * nodeScalingFactor;\n    } else {\n      gl_PointSize = 12.0;\n    }\n  }\n"}),this._nodeMesh=new d.Points(this._nodesGeometry,this._nodesMaterial),this._nodeMesh.frustumCulled=!1,this._nodeMesh.renderOrder=10,this._scene.add(this._nodeMesh);var c=new Float32Array(3*this._nodes.length);for(r=0,o=0,a=this._nodes.length;r<a;r++,o+=3)e.setHex(r+1),c[o+0]=e.r,c[o+1]=e.g,c[o+2]=e.b,this._colorToNodeID[r+1]=this._nodes[r].id;this._nodesPickingMaterial=new d.RawShaderMaterial({fragmentShader:"\n  #ifdef GL_OES_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n  #endif\n\n  precision highp float;\n\n  varying vec3 vColor;\n\n  void main() {\n    float r = 0.0, delta = 0.0, alpha = 1.0;\n    vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n    r = dot(cxy, cxy);\n    if (r > 1.0) {\n      discard;\n    }\n\n    gl_FragColor = vec4(vColor, 1.0) * alpha;\n  }\n",uniforms:{nodeScalingFactor:{type:"f",value:this.nodeScalingFactor},scale:{type:"f",value:this._controls?this._controls.scale:1}},vertexShader:"\n  precision mediump float;\n\n  uniform mat4 modelViewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float nodeScalingFactor;\n  uniform float scale;\n\n  attribute vec3 position;    // blueprint's vertex positions\n  attribute vec3 color;       // only used for raycasting\n  attribute vec3 translation; // x y translation offsets for an instance\n  attribute float size;\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = color;\n\n    vec3 pos = position + translation;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n\n    gl_PointSize = size * scale * nodeScalingFactor;\n  }\n"});var _=this._nodeMesh.clone();this._nodesPickingGeometry=_.geometry.clone(),this._nodesPickingGeometry.addAttribute("color",new d.InstancedBufferAttribute(c,3)),this._nodesPickingsMesh=new d.Points(this._nodesPickingGeometry,this._nodesPickingMaterial),this._nodesPickingsMesh.frustumCulled=!1,this._pickingNodesScene.add(this._nodesPickingsMesh),this._pickingNodesScene.updateMatrixWorld(!0)},e.prototype._drawEdges=function(){var e=this._constructLines(this._edges);this._lineGeometry=new y,this._lineGeometry.setPositions(e.positions),this._lineGeometry.setColors(e.colors),this._lineGeometry.addAttribute("linewidth",new d.InstancedBufferAttribute(new Float32Array(e.sizes),1)),this._lineGeometry.addAttribute("dashed",new d.InstancedBufferAttribute(new Float32Array(e.isDashed),1)),this._lineGeometry.attributes.instanceStart.data.dynamic=!0,this._lineGeometry.attributes.instanceEnd.data.dynamic=!0,this._lineMaterial=new m({dashScale:.1,dashSize:2,depthTest:!1,gapSize:1,scale:this._controls?this._controls.scale:1,vertexColors:d.VertexColors}),this._lineMaterial.useColor=1,this._lineMaterial.resolution.set(this._container.clientWidth,this._container.clientHeight),this._lineMesh=new b(this._lineGeometry,this._lineMaterial),this._lineMesh.computeLineDistances(),this._scene.add(this._lineMesh),this._linePickingMesh=this._lineMesh.clone(),this._linesPickingGeometry=new y,this._linesPickingGeometry.setPositions(e.positions),this._linesPickingGeometry.setColors(e.pickingColors),this._linesPickingGeometry.addAttribute("linewidth",new d.InstancedBufferAttribute(new Float32Array(e.sizes),1)),this._linesPickingGeometry.addAttribute("dashed",new d.InstancedBufferAttribute(new Float32Array(e.isDashed),1)),this._linesPickingGeometry.attributes.instanceStart.data.dynamic=!0,this._linesPickingGeometry.attributes.instanceEnd.data.dynamic=!0,this._linePickingMesh.geometry=this._linesPickingGeometry,this._pickingLineScene.add(this._linePickingMesh),this._pickingLineScene.updateMatrixWorld(!0)},e.prototype._setupScene=function(){this._scene=new d.Scene,this._scene.background=new d.Color(this.options.backgroundColor||"white")},e.prototype._setupPickingScene=function(){this._pickingNodesScene=new d.Scene,this._pickingNodesScene.background=new d.Color(0),this._pickingLineScene=new d.Scene,this._pickingNodesScene.background=new d.Color(0)},e.prototype._setupCamera=function(){this._camera=new d.PerspectiveCamera(this._fov,this._container.clientWidth/this._container.clientHeight,.1,this._far),this._camera.lookAt(0,0,0)},e.prototype._setupRenderer=function(){this._renderer=new d.WebGLRenderer({alpha:!0,antialias:!0}),this._renderer.setPixelRatio(window.devicePixelRatio),this._renderer.setSize(this._container.clientWidth,this._container.clientHeight),this._container.appendChild(this._renderer.domElement)},e.prototype._render=function(){console.log("Render draw calls: ",this._renderer.info.render.calls),this._renderer.render(this._scene,this._camera)},e.prototype._constructLines=function(e){var t=this,i=[],n=[],s=[],r=[],o=[],a=new d.Color,h=new d.Color;return this._arrowsLayer.reset(),e.forEach(function(e,l){var c=Math.atan2(e.target.y-e.source.y,e.target.x-e.source.x),_=e.source.x+e.source.size/2*t.nodeScalingFactor*Math.cos(c),u=e.source.y+e.source.size/2*t.nodeScalingFactor*Math.sin(c),p=e.target.x-(e.target.size/2*t.nodeScalingFactor+2*e.size)*Math.cos(c),v=e.target.y-(e.target.size/2*t.nodeScalingFactor+2*e.size)*Math.sin(c);if(a.setHex(e.color),h.setHex(l+1),e.source.x===e.target.x&&e.source.y===e.target.y){var f=new d.Vector3(e.source.x,e.source.y||0,0),g=new d.Vector3(e.target.x,e.target.y||0,0),m=15*e.source.size,y=Math.PI/2-0,x=new d.CubicBezierCurve3(f,new d.Vector3(m*Math.cos(y),m*Math.sin(y),0).add(f),new d.Vector3(m*Math.cos(-0),m*Math.sin(-0),0).add(f),g).getPoints(50);e._lineSizeRange=[s.length,s.length+2*x.length];for(var b=void 0,w=0;w<x.length-1;w+=2)b?(i.push(b.x,b.y,0,x[w].x,x[w].y,0,x[w].x,x[w].y,0,x[w+1].x,x[w+1].y,0),s.push(e.size,e.size),"dashed"===e.type?r.push(1,1):r.push(0,0),n.push(a.r,a.g,a.b,a.r,a.g,a.b,a.r,a.g,a.b,a.r,a.g,a.b),o.push(h.r,h.g,h.b,h.r,h.g,h.b,h.r,h.g,h.b,h.r,h.g,h.b)):(i.push(x[w].x,x[w].y,0,x[w+1].x,x[w+1].y,0),s.push(e.size),"dashed"===e.type?r.push(1):r.push(0),n.push(a.r,a.g,a.b,a.r,a.g,a.b),o.push(h.r,h.g,h.b,h.r,h.g,h.b)),b=x[w+1]}else i.push(_,u,0,p,v,0),e._lineSizeRange=[s.length,s.length+1],s.push(e.size),"dashed"===e.type?r.push(1):r.push(0),n.push(a.r,a.g,a.b,a.r,a.g,a.b),o.push(h.r,h.g,h.b,h.r,h.g,h.b),t._arrowsLayer.addArrow(e.source,e.target,e.size,e.color)}),{colors:n,isDashed:r,pickingColors:o,positions:i,sizes:s}},e.prototype._indexingNodes=function(){var e=this;this._indexedNodes={},this._nodes.forEach(function(t){e._indexedNodes[t.id]&&console.error("Node with id "+t.id+" already exists"),e._indexedNodes[t.id]=t})},e.prototype._moveNodes=function(e){void 0===e&&(e=!1);for(var t=new Float32Array(3*this._nodes.length),i=0,n=0,s=this._nodes.length;i<s;i++,n+=3)t[n+0]=this._nodes[i].x,t[n+1]=this._nodes[i].y,t[n+2]=0,this._nodes[i].__positionIndex=i,this._labelsLayer&&this._labelsLayer.setLabelPosition(this._nodes[i].__labelIndex,{x:this._nodes[i].x,y:this._nodes[i].y,z:0},!1);this._nodesGeometry.attributes.translation.setArray(t),this._nodesGeometry.attributes.translation.needsUpdate=!0,this._labelsLayer&&this._labelsLayer.recalculate(),this._lineGeometry.dispose();var r=this._constructLines(this._edges);this._lineGeometry=new y,this._lineGeometry.setPositions(r.positions),this._lineGeometry.setColors(r.colors),this._lineGeometry.addAttribute("linewidth",new d.InstancedBufferAttribute(new Float32Array(r.sizes),1)),this._lineGeometry.attributes.instanceStart.data.dynamic=!0,this._lineGeometry.attributes.instanceEnd.data.dynamic=!0,this._lineMesh.geometry=this._lineGeometry,this._arrowsLayer.recalculate(),e&&(this._nodesPickingGeometry.attributes.translation.setArray(t),this._nodesPickingGeometry.attributes.translation.needsUpdate=!0,this._linesPickingGeometry.dispose(),this._linesPickingGeometry=new y,this._linesPickingGeometry.setPositions(r.positions),this._linesPickingGeometry.setColors(r.pickingColors),this._linesPickingGeometry.addAttribute("linewidth",new d.InstancedBufferAttribute(new Float32Array(r.sizes),1)),this._linesPickingGeometry.attributes.instanceStart.data.dynamic=!0,this._linesPickingGeometry.attributes.instanceEnd.data.dynamic=!0,this._linePickingMesh.geometry=this._linesPickingGeometry)},e.prototype._getRandomFromRange=function(e,t){return Math.floor(Math.random()*(t-e))+e},e.prototype._animate=function(){var e=this,t=Date.now();this._arrowsLayer.hide(),this._labelsLayer&&this._labelsLayer.hide();var i=function(){var n,s=(Date.now()-t)/e.animationTime;if(s>=1){for(var r in e._indexedNodes)e._indexedNodes[r]&&(e._indexedNodes[r].x=e._indexedNodes[r].toX,e._indexedNodes[r].y=e._indexedNodes[r].toY);e._moveNodes(!0),e._arrowsLayer.show(),e._labelsLayer&&e._labelsLayer.show(),e._render()}else{for(var r in n=s,s=(n*=2)<1?.5*n*n:-.5*(--n*(n-2)-1),e._indexedNodes)e._indexedNodes[r]&&(e._indexedNodes[r].x=e._indexedNodes[r].toX*s+e._indexedNodes[r].fromX*(1-s),e._indexedNodes[r].y=e._indexedNodes[r].toY*s+e._indexedNodes[r].fromY*(1-s));e._moveNodes(),e._render(),requestAnimationFrame(i)}};i()},e}();i.d(t,"PretyGraph",function(){return S})}])});