!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("three")):"function"==typeof define&&define.amd?define("prettyGraphCore",["three"],t):"object"==typeof exports?exports.prettyGraphCore=t(require("three")):e.prettyGraphCore=t(e.three)}("undefined"!=typeof self?self:this,function(e){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(i,s,function(t){return e[t]}.bind(null,s));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(t,n){t.exports=e},function(e,t,n){"use strict";n.r(t);var i=n(0);class s{constructor(){this.events={}}on(e,t){return"object"!=typeof this.events[e]&&(this.events[e]=[]),this.events[e].push(t),()=>this.removeListener(e,t)}removeListener(e,t){if("object"!=typeof this.events[e])return;const n=this.events[e].indexOf(t);n>-1&&this.events[e].splice(n,1)}removeAllListeners(){Object.keys(this.events).forEach(e=>this.events[e].splice(0,this.events[e].length))}emit(e,...t){"object"==typeof this.events[e]&&[...this.events[e]].forEach(e=>e.apply(this,t))}once(e,t){const n=this.on(e,(...e)=>{n(),t.apply(this,e)});return n}}const r="\n  precision mediump float;\n\n  uniform mat4 modelViewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float scale;\n  uniform vec2 spriteDim;\n  uniform vec2 textureDim;\n\n  attribute vec3 position;    // blueprint's vertex positions\n  attribute vec3 color;       // only used for raycasting\n  attribute vec3 translation; // x y translation offsets for an instance\n  attribute float size;\n  attribute float image;\n\n  varying vec3 vColor;\n  varying float vScale;\n  varying float vSize;\n  varying highp vec4 v_sprite;\n\n  void main() {\n    vColor = color;\n    vScale = scale;\n    vSize = size;\n\n    highp vec2 sp = vec2(mod((image * spriteDim.x), textureDim.x), floor((image * spriteDim.x) / textureDim.y) * spriteDim.y);\n    v_sprite = vec4(sp.x / textureDim.x, sp.y / textureDim.y, spriteDim.x / textureDim.x, spriteDim.y / textureDim.y);\n\n    vec3 pos = position + translation;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n\n    gl_PointSize = size * scale * 10.0;\n  }\n",o="\n  #ifdef GL_OES_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n  #endif\n\n  precision highp float;\n\n  uniform sampler2D textureMap;\n\n  varying float vScale;\n  varying float vSize;\n  varying vec3 vColor;\n  varying highp vec4 v_sprite;\n\n  void main() {\n    vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n    float distance = 0.2;\n    float border = 0.2;\n    float radius = 0.5;\n\n    if (vSize * 10.0 * vScale > 75.0) {\n      distance = 0.02;\n      if (vScale < 3.0) {\n        border = distance + 0.025;\n      } else {\n        border = distance + 0.02;\n      }\n      vec2 m = uv - vec2(0.5, 0.5);\n      float dist = radius - sqrt(dot(m, m));\n\n      float sm = smoothstep(0.0, distance, dist);\n      float sm2 = smoothstep(border, border - distance, dist);\n      float alpha = sm*sm2;\n\n      float tm = smoothstep(border, border + distance, dist);\n\n      if (dist > border)\n        gl_FragColor = vec4(texture2D(textureMap, vec2((v_sprite.s + v_sprite.p * uv.x), (v_sprite.t + v_sprite.q * uv.y))).rgb, tm);\n      else if (dist > 0.0)\n        gl_FragColor = vec4(vColor, alpha);\n      else discard;\n    } else {\n      if (vScale < 0.3) {\n        vec2 m = uv - vec2(0.5, 0.5);\n        float dist = radius - sqrt(dot(m, m));\n        if (dist > border || dist > 0.0)\n          gl_FragColor = vec4(0.8, 0.8, 0.8, 1.0);\n        else discard;\n      } else if (vScale < 1.5) {\n        distance = 0.25;\n        if (vScale > 1.2) {\n          border = 0.5 - (vScale / 10.0) * 1.9;\n        } else {\n          border = 0.25;\n        }\n\n        vec2 m = uv - vec2(0.5, 0.5);\n        float dist = radius - sqrt(dot(m, m));\n\n        float sm = smoothstep(0.0, distance, dist);\n        float sm2 = smoothstep(border, border - distance, dist);\n        float alpha = sm*sm2;\n\n        float tm = smoothstep(border, border + distance, dist);\n\n        if (dist > border || dist > 0.0)\n          gl_FragColor = vec4(0.0, 0.0, 0.0, alpha);\n        else discard;\n      }\n    }\n  }\n",a="\n  precision mediump float;\n\n  uniform mat4 modelViewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float scale;\n\n  attribute vec3 position;    // blueprint's vertex positions\n  attribute vec3 color;       // only used for raycasting\n  attribute vec3 translation; // x y translation offsets for an instance\n  attribute float size;\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = color;\n\n    vec3 pos = position + translation;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n\n    gl_PointSize = size * scale * 10.0;\n  }\n",d="\n  #ifdef GL_OES_standard_derivatives\n  #extension GL_OES_standard_derivatives : enable\n  #endif\n\n  precision highp float;\n\n  varying vec3 vColor;\n\n  void main() {\n    float r = 0.0, delta = 0.0, alpha = 1.0;\n    vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n    r = dot(cxy, cxy);\n    if (r > 1.0) {\n      discard;\n    }\n\n    gl_FragColor = vec4(vColor, 1.0) * alpha;\n  }\n";function h(e){i.ShaderMaterial.call(this,{type:"LineMaterial",uniforms:i.UniformsUtils.clone(i.ShaderLib.line.uniforms),vertexShader:i.ShaderLib.line.vertexShader,fragmentShader:i.ShaderLib.line.fragmentShader}),this.dashed=!1,Object.defineProperties(this,{color:{enumerable:!0,get:function(){return this.uniforms.diffuse.value},set:function(e){this.uniforms.diffuse.value=e}},useColor:{enumerable:!0,get:function(){return this.uniforms.useColor.value},set:function(e){this.uniforms.useColor.value=e}},dashScale:{enumerable:!0,get:function(){return this.uniforms.dashScale.value},set:function(e){this.uniforms.dashScale.value=e}},dashSize:{enumerable:!0,get:function(){return this.uniforms.dashSize.value},set:function(e){this.uniforms.dashSize.value=e}},gapSize:{enumerable:!0,get:function(){return this.uniforms.gapSize.value},set:function(e){this.uniforms.gapSize.value=e}},resolution:{enumerable:!0,get:function(){return this.uniforms.resolution.value},set:function(e){this.uniforms.resolution.value.copy(e)}}}),this.setValues(e)}function c(){i.InstancedBufferGeometry.call(this),this.type="LineSegmentsGeometry";this.setIndex([0,2,1,2,3,1,2,4,3,4,5,3,4,6,5,6,7,5]),this.addAttribute("position",new i.Float32BufferAttribute([-1,2,0,1,2,0,-1,1,0,1,1,0,-1,0,0,1,0,0,-1,-1,0,1,-1,0],3)),this.addAttribute("uv",new i.Float32BufferAttribute([-1,2,1,2,-1,1,1,1,-1,-1,1,-1,-1,-2,1,-2],2))}var l,u,_,p;function f(e,t){i.Mesh.call(this),this.type="LineSegments2",this.geometry=void 0!==e?e:new c,this.material=void 0!==t?t:new h({color:16777215*Math.random()})}function g(e,t){f.call(this),this.type="Line2",this.geometry=void 0!==e?e:new i.LineGeometry,this.material=void 0!==t?t:new i.LineMaterial({color:16777215*Math.random()})}i.UniformsLib.line={resolution:{value:new i.Vector2(1,1)},dashScale:{value:1},useColor:{value:0},dashSize:{value:1},gapSize:{value:1}},i.ShaderLib.line={uniforms:i.UniformsUtils.merge([i.UniformsLib.common,i.UniformsLib.fog,i.UniformsLib.line]),vertexShader:"\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\t\tattribute float linewidth;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\tvarying vec2 vUv;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\tvUv = uv;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec2 ndcStart = clipStart.xy / clipStart.w;\n\t\t\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd - ndcStart;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t// perpendicular to dir\n\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\n\t\t\t// undo aspect ratio adjustment\n\t\t\tdir.x /= aspect;\n\t\t\toffset.x /= aspect;\n\n\t\t\t// sign flip\n\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t// endcaps\n\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\toffset += - dir;\n\n\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\toffset += dir;\n\n\t\t\t}\n\n\t\t\t// adjust for linewidth\n\t\t\toffset *= linewidth;\n\n\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\toffset /= resolution.y;\n\n\t\t\t// select end\n\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t// back to clip space\n\t\t\toffset *= clip.w;\n\n\t\t\tclip.xy += offset;\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t",fragmentShader:"\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\t\tuniform float useColor;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\tfloat a = vUv.x;\n\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t}\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tif (useColor == 1.0) {\n\t\t\t\tgl_FragColor = vec4( vColor, 1.0 );\n\t\t\t} else {\n\t\t\t\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\n\t\t\t}\n\n\t\t\t#include <premultiplied_alpha_fragment>\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\n\t\t}\n\t\t"},h.prototype=Object.create(i.ShaderMaterial.prototype),h.prototype.constructor=h,h.prototype.isLineMaterial=!0,h.prototype.copy=function(e){return i.ShaderMaterial.prototype.copy.call(this,e),this.color.copy(e.color),this.resolution=e.resolution,this},c.prototype=Object.assign(Object.create(i.InstancedBufferGeometry.prototype),{constructor:c,isLineSegmentsGeometry:!0,applyMatrix:function(e){var t=this.attributes.instanceStart,n=this.attributes.instanceEnd;return void 0!==t&&(e.applyToBufferAttribute(t),e.applyToBufferAttribute(n),t.data.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},setPositions:function(e){var t;e instanceof Float32Array?t=e:Array.isArray(e)&&(t=new Float32Array(e));var n=new i.InstancedInterleavedBuffer(t,6,1);return this.addAttribute("instanceStart",new i.InterleavedBufferAttribute(n,3,0)),this.addAttribute("instanceEnd",new i.InterleavedBufferAttribute(n,3,3)),this.computeBoundingBox(),this.computeBoundingSphere(),this},setColors:function(e){var t;e instanceof Float32Array?t=e:Array.isArray(e)&&(t=new Float32Array(e));var n=new i.InstancedInterleavedBuffer(t,6,1);return this.addAttribute("instanceColorStart",new i.InterleavedBufferAttribute(n,3,0)),this.addAttribute("instanceColorEnd",new i.InterleavedBufferAttribute(n,3,3)),this},fromWireframeGeometry:function(e){return this.setPositions(e.attributes.position.array),this},fromEdgesGeometry:function(e){return this.setPositions(e.attributes.position.array),this},fromMesh:function(e){return this.fromWireframeGeometry(new i.WireframeGeometry(e.geometry)),this},fromLineSegements:function(e){var t=e.geometry;return t.isGeometry?this.setPositions(t.vertices):t.isBufferGeometry&&this.setPositions(t.position.array),this},computeBoundingBox:(u=new i.Box3,function(){null===this.boundingBox&&(this.boundingBox=new i.Box3);var e=this.attributes.instanceStart,t=this.attributes.instanceEnd;void 0!==e&&void 0!==t&&(this.boundingBox.setFromBufferAttribute(e),u.setFromBufferAttribute(t),this.boundingBox.union(u))}),computeBoundingSphere:(l=new i.Vector3,function(){null===this.boundingSphere&&(this.boundingSphere=new i.Sphere),null===this.boundingBox&&this.computeBoundingBox();var e=this.attributes.instanceStart,t=this.attributes.instanceEnd;if(void 0!==e&&void 0!==t){var n=this.boundingSphere.center;this.boundingBox.getCenter(n);for(var s=0,r=0,o=e.count;r<o;r++)l.fromBufferAttribute(e,r),s=Math.max(s,n.distanceToSquared(l)),l.fromBufferAttribute(t,r),s=Math.max(s,n.distanceToSquared(l));this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error("LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.",this)}}),toJSON:function(){},clone:function(){},copy:function(e){return this}}),f.prototype=Object.assign(Object.create(i.Mesh.prototype),{constructor:f,isLineSegments2:!0,computeLineDistances:(_=new i.Vector3,p=new i.Vector3,function(){for(var e=this.geometry,t=e.attributes.instanceStart,n=e.attributes.instanceEnd,s=new Float32Array(2*t.data.count),r=0,o=0,a=t.data.count;r<a;r++,o+=2)_.fromBufferAttribute(t,r),p.fromBufferAttribute(n,r),s[o]=0===o?0:s[o-1],s[o+1]=s[o]+_.distanceTo(p);var d=new i.InstancedInterleavedBuffer(s,2,1);return e.addAttribute("instanceDistanceStart",new i.InterleavedBufferAttribute(d,1,0)),e.addAttribute("instanceDistanceEnd",new i.InterleavedBufferAttribute(d,1,1)),this}),copy:function(e){return this}}),g.prototype=Object.assign(Object.create(f.prototype),{constructor:g,isLine2:!0,copy:function(e){return this}});class v{constructor(e){this.onEvent=new s,this._options={},this._container=document.body,this._fov=75,this._far=1e4,this._nodes=[],this._edges=[],this._animationFrameRequestId=null,this._center=null,this._hoveredNode=null,this._hoveredNodeID=null,this._hoveredEdge=null,this._hoveredEdgeID=null,this._dragInProgress=!1,this._dragging=!1,this._plane=new i.Plane,this._raycaster=new i.Raycaster,this._intersection=new i.Vector3,this._offset=new i.Vector3,this._textureWidth=0,this._textureHeight=0,this._textureIndex=0,this._nodeImageToIndex={},this._canvasTextureWidth=4096,this._canvasTextureHeight=4096,this.options=e,this.options.container&&(this._container=this.options.container,e.clearContainer&&(this._container.innerHTML="")),this._setupScene(),this._setupCamera(),this._setupRenderer(),this._controls=new e.controls(this._camera,this._container),this._controls.init(),this._controls.onChange.on("scale",this._onScale.bind(this)),this._controls.onChange.on("mousemove",this._onMouseMove.bind(this)),this._controls.onChange.on("contextmenu",this._onContextMenu.bind(this)),this._controls.onChange.on("dblclick",this._onDblClick.bind(this)),this._controls.onChange.on("click",this._onClick.bind(this)),this._controls.onChange.on("mousedown",this._onMouseDown.bind(this)),this._controls.onChange.on("mouseup",this._onMouseUp.bind(this)),this._createTextureMap(),this._render(),window.addEventListener("resize",()=>{const e=this._container.getBoundingClientRect();this._renderer.setSize(e.width,e.height),this._camera.aspect=e.width/e.height,this._camera.updateProjectionMatrix(),this._pickingTexture=new i.WebGLRenderTarget(e.width,e.height),this._render()})}set options(e){this._options=e}get options(){return this._options}setData(e){this._nodes=e.nodes,this._edges=e.links,e.center&&(this._center=e.nodes.find(t=>+t.id==+e.center),this._center&&this._controls.setTransform(this._center)),this._disposeMesh(),this._disposeMaterials(),this._disposeGeometries(),this._disposeTextures(),this._renderer.clear(),this._setupScene(),this._setupPickingScene();const t=this._container.getBoundingClientRect();this._pickingTexture=new i.WebGLRenderTarget(t.width,t.height),this._pickingTexture.texture.minFilter=i.LinearFilter,this._drawEdges(),this._drawNodes(),this._drawArrows()}stopRenderLoop(){this._animationFrameRequestId&&cancelAnimationFrame(this._animationFrameRequestId),this._animationFrameRequestId=null}resumeRenderLoop(){this._animationFrameRequestId||this._render()}destroy(){this._disposeMesh(),this._disposeTextures(),this._disposeMaterials(),this._disposeGeometries(),this.stopRenderLoop(),this._disposeRenderer(),this._container.innerHTML=""}_onMouseMove(e){if(this._dragging){const t=this._container.getBoundingClientRect(),n=new i.Vector3;n.x=e.x/t.width*2-1,n.y=-e.y/t.height*2+1;let s={x:this._hoveredNode.x,y:this._hoveredNode.y};if(this._dragInProgress)this._raycaster.setFromCamera(n,this._camera),this._raycaster.ray.intersectPlane(this._plane,this._intersection),s=this._intersection.sub(this._offset).clone();else{const e=new i.Vector3;this._camera.getWorldDirection(e),this._plane.setFromNormalAndCoplanarPoint(e,new i.Vector3(this._hoveredNode.x,this._hoveredNode.y,0)),this._raycaster.setFromCamera(n,this._camera),this._raycaster.ray.intersectPlane(this._plane,this._intersection),this._offset.copy(this._intersection).sub(new i.Vector3(this._hoveredNode.x,this._hoveredNode.y,0)),s=this._intersection.sub(this._offset).clone(),this._dragInProgress=!0}null!==this._hoveredNodeID&&(this._nodesGeometry.attributes.translation.setXYZ(this._hoveredNodeID,s.x,s.y,0),this._nodesPickingGeometry.attributes.translation.setXYZ(this._hoveredNodeID,s.x,s.y,0)),this._hoveredNode.x=s.x,this._hoveredNode.y=s.y;const r=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeMoving",{node:this._hoveredNode,...r,scale:this._controls.scale}),this._nodesGeometry.attributes.translation.needsUpdate=!0,this._nodesPickingGeometry.attributes.translation.needsUpdate=!0;const o=this._constructLines(this._edges);this._lineGeometry.setPositions(o.positions),this._linesPickingGeometry.setPositions(o.positions),this._lineGeometry.attributes.instanceStart.data.needsUpdate=!0,this._lineGeometry.attributes.instanceEnd.data.needsUpdate=!0,this._linesPickingGeometry.attributes.instanceStart.data.needsUpdate=!0,this._linesPickingGeometry.attributes.instanceEnd.data.needsUpdate=!0,this._render()}else this._testNode(e)||this._testEdge(e)}_onMouseUp(){this._controls.enabled=!0,this._dragging=!1,this._dragInProgress=!1}_onMouseDown(){if(null!==this._hoveredNode){const e=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeClick",{node:this._hoveredNode,...e,scale:this._controls.scale}),this._controls.enabled=!1,this._dragging=!0}}_onClick(){this._hoveredNode||this._hoveredEdge||this.onEvent.emit("workspaceClick")}_onDblClick(){if(null!==this._hoveredNode){const e=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeDblClick",{node:this._hoveredNode,...e,scale:this._controls.scale})}}_onContextMenu(){if(null!==this._hoveredNode){const e=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeContextMenu",{node:this._hoveredNode,...e,scale:this._controls.scale})}}_onScale(e){if(this._nodesMaterial){if(this._nodesMaterial.uniforms.scale.value=e,this._nodesMaterial.needsUpdate=!0,this._nodesPickingMaterial.uniforms.scale.value=e,this._nodesPickingMaterial.needsUpdate=!0,this._hoveredNode){const e=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeScaling",{node:this._hoveredNode,...e,scale:this._controls.scale})}this._render()}}_disposeMesh(){this._lineMesh&&this._scene.remove(this._lineMesh),this._nodeMesh&&this._scene.remove(this._nodeMesh),this._nodesPickingsMesh&&this._pickingNodesScene.remove(this._nodesPickingsMesh)}_disposeGeometries(){this._nodesGeometry&&this._nodesGeometry.dispose(),this._nodesPickingGeometry&&this._nodesPickingGeometry.dispose(),this._lineGeometry&&this._lineGeometry.dispose()}_disposeRenderer(){this._renderer&&this._renderer.dispose()}_disposeMaterials(){this._nodesMaterial&&this._nodesMaterial.dispose(),this._nodesPickingMaterial&&this._nodesPickingMaterial.dispose(),this._lineMaterial&&this._lineMaterial.dispose()}_disposeTextures(){this._textureMap&&this._textureMap.dispose(),this._pickingTexture&&this._pickingTexture.dispose()}_testNode(e){if(this._pickingTexture){this._renderer.render(this._pickingNodesScene,this._camera,this._pickingTexture);const t=new Uint8Array(4);this._renderer.readRenderTargetPixels(this._pickingTexture,e.x,this._pickingTexture.height-e.y,1,1,t);const n=t[0]<<16|t[1]<<8|t[2];if(n){if(this._hoveredNodeID!==n-1){null!==this._hoveredNode&&this._setNodeColor(this._hoveredNode.color),null!==this._hoveredEdge&&(this._setEdgeColor(this._hoveredEdge.color),this._setEdgeSize(this._hoveredEdge.size)),this._hoveredNode=this._nodes[n-1],this._hoveredNodeID=n-1,this._setNodeColor(16711680);const e=this._translateCoordinates(this._hoveredNode.x,this._hoveredNode.y);this.onEvent.emit("nodeHover",{node:this._hoveredNode,...e,scale:this._controls.scale})}return this._render(),!0}return null!==this._hoveredNode&&(this._setNodeColor(this._hoveredNode.color),this.onEvent.emit("nodeUnhover",{node:this._hoveredNode}),this._hoveredNode=null,this._hoveredNodeID=null),this._render(),!1}return!1}_testEdge(e){if(this._pickingTexture){this._renderer.render(this._pickingLineScene,this._camera,this._pickingTexture);const t=new Uint8Array(4);this._renderer.readRenderTargetPixels(this._pickingTexture,e.x,this._pickingTexture.height-e.y,1,1,t);const n=t[0]<<16|t[1]<<8|t[2];n?this._hoveredEdgeID!==n-1&&(null!==this._hoveredEdge&&(this._setEdgeColor(this._hoveredEdge.color),this._setEdgeSize(this._hoveredEdge.size)),null!==this._hoveredNode&&this._setNodeColor(this._hoveredNode.color),this._hoveredEdge=this._edges[n-1],this._hoveredEdgeID=n-1,this._setEdgeColor(16711680),this._setEdgeSize(this._hoveredEdge.size<5?5:this._hoveredEdge.size),this.onEvent.emit("edgeHover",{edge:this._hoveredEdge,...e}),this._render()):null!==this._hoveredEdge&&(this._setEdgeColor(this._hoveredEdge.color),this._setEdgeSize(this._hoveredEdge.size),this.onEvent.emit("edgeUnhover",{edge:this._hoveredEdge}),this._hoveredEdge=null,this._hoveredEdgeID=null,this._render())}}_setEdgeSize(e){if(this._hoveredEdge._lineSizeRange){const t=this._hoveredEdge._lineSizeRange[1]-this._hoveredEdge._lineSizeRange[0];if(t>1)for(let t=this._hoveredEdge._lineSizeRange[0];t<this._hoveredEdge._lineSizeRange[1]/2+2;t++)this._lineGeometry.attributes.linewidth.setX(t,e);else this._lineGeometry.attributes.linewidth.setX(this._hoveredEdge._lineSizeRange[0],e);if(this._lineGeometry.attributes.linewidth.updateRange={offset:this._hoveredEdge._lineSizeRange[0],count:t},this._lineGeometry.attributes.linewidth.needsUpdate=!0,t>1)for(let t=this._hoveredEdge._lineSizeRange[0];t<this._hoveredEdge._lineSizeRange[1]/2+2;t++)this._linesPickingGeometry.attributes.linewidth.setX(t,e);else this._linesPickingGeometry.attributes.linewidth.setX(this._hoveredEdge._lineSizeRange[0],e);this._linesPickingGeometry.attributes.linewidth.updateRange={offset:this._hoveredEdge._lineSizeRange[0],count:t},this._linesPickingGeometry.attributes.linewidth.needsUpdate=!0,this._render()}}_setEdgeColor(e){(new i.Color).setHex(e),null!==this._hoveredEdgeID&&this._render()}_setNodeColor(e){const t=new i.Color;t.setHex(e),null!==this._hoveredNodeID&&(this._nodeColorAttribute.setXYZ(this._hoveredNodeID,t.r,t.g,t.b),this._nodeColorAttribute.needsUpdate=!0,this._render())}_translateCoordinates(e,t){const n=new i.Vector3(e,t,0),s=.5*this._renderer.context.canvas.width,r=.5*this._renderer.context.canvas.height;return n.project(this._camera),n.x=n.x*s+s,n.y=-n.y*r+r,{x:n.x,y:n.y}}_drawNodes(){const e=new i.Color,t=new Float32Array(3*this._nodes.length),n=new Float32Array(3*this._nodes.length),s=new Float32Array(this._nodes.length),h=new Float32Array(this._nodes.length);for(let i=0,r=0,o=this._nodes.length;i<o;i++,r+=3)t[r+0]=this._nodes[i].x,t[r+1]=this._nodes[i].y,t[r+2]=0,e.setHex(this._nodes[i].color),n[r+0]=e.r,n[r+1]=e.g,n[r+2]=e.b,s[i]=this._nodes[i].size,this._nodes[i].img?h[i]=this._loadImage(this._nodes[i].img):h[i]=-1;const c=new i.BufferGeometry;this._nodesGeometry=new i.InstancedBufferGeometry,this._nodesGeometry.index=c.index,this._nodesGeometry.attributes=c.attributes,this._nodesGeometry.addAttribute("position",new i.BufferAttribute(new Float32Array([0,0,0]),3)),this._nodeTranslateAttribute=new i.InstancedBufferAttribute(t,3),this._nodeColorAttribute=new i.InstancedBufferAttribute(n,3),this._nodesGeometry.addAttribute("translation",this._nodeTranslateAttribute),this._nodesGeometry.addAttribute("color",this._nodeColorAttribute),this._nodesGeometry.addAttribute("size",new i.InstancedBufferAttribute(s,1)),this._nodesGeometry.addAttribute("image",new i.InstancedBufferAttribute(h,1)),this._nodesMaterial=new i.RawShaderMaterial({depthTest:!1,fragmentShader:o,transparent:!1,uniforms:{scale:{type:"f",value:this._controls?this._controls.scale:1},spriteDim:{value:new i.Vector2(this._textureWidth,this._textureHeight)},textureDim:{value:new i.Vector2(this._canvasTextureWidth,this._canvasTextureHeight)},textureMap:{type:"t",value:this._textureMap}},vertexShader:r}),this._nodeMesh=new i.Points(this._nodesGeometry,this._nodesMaterial),this._nodeMesh.frustumCulled=!1,this._nodeMesh.renderOrder=10,this._scene.add(this._nodeMesh);const l=new Float32Array(3*this._nodes.length);for(let t=0,n=0,i=this._nodes.length;t<i;t++,n+=3)e.setHex(t+1),l[n+0]=e.r,l[n+1]=e.g,l[n+2]=e.b;this._nodesPickingMaterial=new i.RawShaderMaterial({fragmentShader:d,uniforms:{scale:{type:"f",value:this._controls?this._controls.scale:1}},vertexShader:a});const u=this._nodeMesh.clone();this._nodesPickingGeometry=u.geometry.clone(),this._nodesPickingGeometry.addAttribute("color",new i.InstancedBufferAttribute(l,3)),this._nodesPickingsMesh=new i.Points(this._nodesPickingGeometry,this._nodesPickingMaterial),this._nodesPickingsMesh.frustumCulled=!1,this._pickingNodesScene.add(this._nodesPickingsMesh),this._pickingNodesScene.updateMatrixWorld(!0),this._render()}_drawEdges(){const e=this._constructLines(this._edges);this._lineGeometry=new c,this._lineGeometry.setPositions(e.positions),this._lineGeometry.setColors(e.colors),this._lineGeometry.addAttribute("linewidth",new i.InstancedBufferAttribute(new Float32Array(e.sizes),1)),this._lineGeometry.attributes.instanceStart.data.dynamic=!0,this._lineGeometry.attributes.instanceEnd.data.dynamic=!0,this._lineMaterial=new h({dashed:!1,depthTest:!1,vertexColors:i.VertexColors});const t=this._container.getBoundingClientRect();this._lineMaterial.useColor=1,this._lineMaterial.resolution.set(t.width,t.height),this._lineMesh=new g(this._lineGeometry,this._lineMaterial),this._lineMesh.computeLineDistances(),this._scene.add(this._lineMesh);const n=this._lineMesh.clone();this._linesPickingGeometry=new c,this._linesPickingGeometry.setPositions(e.positions),this._linesPickingGeometry.setColors(e.pickingColors),this._linesPickingGeometry.addAttribute("linewidth",new i.InstancedBufferAttribute(new Float32Array(e.sizes),1)),this._linesPickingGeometry.attributes.instanceStart.data.dynamic=!0,this._linesPickingGeometry.attributes.instanceEnd.data.dynamic=!0,n.geometry=this._linesPickingGeometry,this._pickingLineScene.add(n),this._pickingLineScene.updateMatrixWorld(!0),this._render()}_drawArrows(){}_setupScene(){this._scene=new i.Scene,this._scene.background=new i.Color(this.options.backgroundColor||"white")}_setupPickingScene(){this._pickingNodesScene=new i.Scene,this._pickingNodesScene.background=new i.Color(0),this._pickingLineScene=new i.Scene,this._pickingNodesScene.background=new i.Color(0)}_setupCamera(){const e=this._container.getBoundingClientRect();this._camera=new i.PerspectiveCamera(this._fov,e.width/e.height,.1,this._far),this._camera.lookAt(0,0,0)}_setupRenderer(){this._renderer=new i.WebGLRenderer({alpha:!0,antialias:!0}),this._renderer.setPixelRatio(window.devicePixelRatio);const e=this._container.getBoundingClientRect();this._renderer.setSize(e.width,e.height),this._container.appendChild(this._renderer.domElement)}_render(){this._renderer.render(this._scene,this._camera)}_createTextureMap(){this._textureCanvas=document.createElement("canvas"),this._textureCanvas.width=this._canvasTextureWidth,this._textureCanvas.height=this._canvasTextureHeight,this._textureHeight=this._canvasTextureHeight/32,this._textureWidth=this._canvasTextureWidth/32;const e=this._textureCanvas.getContext("2d");e&&(e.fillStyle="white",e.clearRect(0,0,this._canvasTextureWidth,this._canvasTextureHeight)),this._textureMap=new i.CanvasTexture(this._textureCanvas),this._textureMap.flipY=!1}_loadImage(e){if(void 0!==this._nodeImageToIndex[e])return this._nodeImageToIndex[e];const t=this._textureCanvas.getContext("2d");if(!t)return-1;const n=this._textureIndex;this._textureIndex+=1,this._nodeImageToIndex[e]=n;const i=new Image;return i.onload=(()=>{const e=n*this._textureWidth%this._canvasTextureWidth,s=Math.floor(n*this._textureWidth/this._canvasTextureWidth)*this._textureHeight;t.drawImage(i,0,0,i.width,i.height,e,s,this._textureWidth,this._textureHeight),this._textureMap.needsUpdate=!0,this._render()}),i.src=e,n}_constructLines(e){const t=[],n=[],s=[],r=[],o=new i.Color,a=new i.Color;return e.forEach((e,d)=>{const h=Math.atan2(e.target.y-e.source.y,e.target.x-e.source.x),c=e.source.x+25*Math.cos(h),l=e.source.y+25*Math.sin(h),u=e.target.x-25*Math.cos(h),_=e.target.y-25*Math.sin(h);if(o.setHex(e.color),a.setHex(d+1),e.source.x===e.target.x&&e.source.y===e.target.y){const d=new i.Vector3(e.source.x,e.source.y||0,0),h=new i.Vector3(e.target.x,e.target.y||0,0),c=15*e.source.size,l=-0,u=l+Math.PI/2,_=new i.CubicBezierCurve3(d,new i.Vector3(c*Math.cos(u),c*Math.sin(u),0).add(d),new i.Vector3(c*Math.cos(l),c*Math.sin(l),0).add(d),h).getPoints(50);let p;e._lineSizeRange=[s.length,s.length+2*_.length];for(let i=0;i<_.length-1;i+=2)p?(t.push(p.x,p.y,0,_[i].x,_[i].y,0,_[i].x,_[i].y,0,_[i+1].x,_[i+1].y,0),s.push(e.size,e.size),n.push(o.r,o.g,o.b,o.r,o.g,o.b,o.r,o.g,o.b,o.r,o.g,o.b),r.push(a.r,a.g,a.b,a.r,a.g,a.b,a.r,a.g,a.b,a.r,a.g,a.b)):(t.push(_[i].x,_[i].y,0,_[i+1].x,_[i+1].y,0),s.push(e.size),n.push(o.r,o.g,o.b,o.r,o.g,o.b),r.push(a.r,a.g,a.b,a.r,a.g,a.b)),p=_[i+1]}else t.push(c,l,0,u,_,0),e._lineSizeRange=[s.length,s.length+1],s.push(e.size),n.push(o.r,o.g,o.b,o.r,o.g,o.b),r.push(a.r,a.g,a.b,a.r,a.g,a.b)}),{colors:n,pickingColors:r,positions:t,sizes:s}}}n.d(t,"PretyGraph",function(){return v})}])});